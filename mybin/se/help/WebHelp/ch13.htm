<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Chapter 13.  Appendix</title><link rel="stylesheet" href="slickedit_help.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.71.1"><link rel="start" href="index.htm" title="Welcome to SlickEdit 2013"><link rel="up" href="index.htm" title="Welcome to SlickEdit 2013"><link rel="prev" href="ch12s13.htm" title="Help"><link rel="next" href="ch13s02.htm" title="Encoding"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><p class="HeaderText"><a href="index.htm#contents">Contents</a> : <a href="ix01.htm">Index</a> : <a href="search.htm">Search</a></p><hr><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a name="chapter_020a0215-c1c1-4602-a55e-42a6ddbde7da"></a>Chapter 13. 
      <a name="chap_appendix_12392_998404"></a>Appendix</h2></div></div></div><p class="NormalText">This chapter contains reference information about encodings, 
    emulations, and configuring SlickEdit.</p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="sect_tutorials_12026_78082"></a>
    <a name="sect_tutorials_12026_1003887"></a>
    <a class="indexterm" name="sect_tutorials_5847D361_F65B"></a>Tutorials</h2></div></div></div><p class="NormalText">Tutorials in this section:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
        <a href="ch13.htm#sect_tutorials_12026_84494">Hello World Tutorial (C/C++)</a>
      </p></li><li><p class="NormalText">
        <a href="ch13.htm#sect_tutorials_12026_83199">Hello World Tutorial (C#)</a>
      </p></li><li><p class="NormalText">
        <a href="ch13.htm#sect_tutorials_12026_20268">Hello World Tutorial (Java)</a>
      </p></li><li><p class="NormalText">
        <a href="ch13.htm#sect_tutorials_12026_35377">Vim Tutorial</a>
      </p></li><li><p class="NormalText">
        <a href="ch13.htm#sect_tutorials_12026_37729">Creating and Distributing Custom Toolbars</a>
      </p></li></ul></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_tutorials_12026_84494"></a>
      <a name="sect_tutorials_12026_1007335"></a>
      <a class="indexterm" name="sect_tutorials_3EE592DD_DC79"></a>Hello World Tutorial (C/C++)</h3></div></div></div><p class="NormalText">This tutorial outlines the steps to create, build, and run a sample Hello World program using the auto-build system for GNU C/C++ projects. </p><p class="NormalText">The sample C++ program prints the text <span><strong class="command">hello world</strong></span> to the standard output on the Console view. Follow these steps to create a Hello World program using the GNU C/C++ wizard.</p><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1010090"></a>Create the Project Using the GNU C/C++ Wizard</h4></div></div></div><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">New</strong></span>.</p></li><li><p class="NormalText">On the <span><strong class="guilabel">Project</strong></span> tab, click to expand 
            <span><strong class="guilabel">C/C++</strong></span>, then click <span><strong class="guilabel">GNU C/C++ Wizard</strong></span>.</p></li><li><p class="NormalText">Specify the <span><strong class="guilabel">Project name</strong></span> as <span class="bold"><strong>HelloWorld</strong></span>. Change the location if you want.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> on New project dialog.</p></li><li><p class="NormalText">Select the <span><strong class="guilabel">Project Type</strong></span> as <span><strong class="guilabel">Executable</strong></span> and the <span><strong class="guilabel">Source Type</strong></span> as <span><strong class="guilabel">C++</strong></span>.</p></li><li><p class="NormalText">Click <span><strong class="guilabel">Next</strong></span>.</p></li><li><p class="NormalText">For the <span><strong class="guilabel">Application Type</strong></span>, select <span><strong class="guilabel">A "Hello World" application</strong></span>.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">Next</strong></span>.</p></li><li><p class="NormalText">Select <span><strong class="guilabel">Build without a makefile</strong></span>.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">Finish</strong></span>. A dialog is displayed, containing information about the new project. Click <span><strong class="guibutton">OK</strong></span>. The wizard constructs a workspace by the name of <code class="filename">HelloWorld.vpw</code>, a project called <code class="filename">HelloWorld.vpj</code>, and a program file called <code class="filename">HelloWorld.cpp</code>.</p></li></ol></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007359"></a>Build the Project</h4></div></div></div><p class="NormalText">To build this project, from the main menu, select <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span>.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007361"></a>Run the Program</h4></div></div></div><p class="NormalText">To run the program, from the main menu, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Execute</strong></span>. The application displays <span><strong class="command">Hello World</strong></span> in the output window.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007363"></a>Comments</h4></div></div></div><p class="NormalText">When creating a new project in a new workspace, a new workspace does not have to be explicitly created. </p><p class="NormalText">The workspace is created automatically when the project is created. The workspace will be given the same name as the project.</p><p class="NormalText">For large projects, multiple projects most likely will be created and the workspace name should be distinct from the project names for easier organization.</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_tutorials_12026_83199"></a>
      <a name="sect_tutorials_12026_1010346"></a>
      <a class="indexterm" name="sect_tutorials_EA856907_0262"></a>
      <a class="indexterm" name="sect_tutorials_DCB21A12_6325"></a>Hello World Tutorial (C#)</h3></div></div></div><p class="NormalText">This tutorial describes how to build a simple C# console application with 
      SlickEdit, no Visual Studio required. It assumes you have the .NET Framework 2.0 and the C# 
      compiler (<code class="filename">Csc.exe</code>) installed under 
      <code class="filename">%WINDIR%\Microsoft.NET\Framework\v2.0.50727</code>. The Windows SDK (v6.0 or later) 
      or the full .NET Framework SDK is required if you want to interact with the managed code debugger 
      (<code class="filename">mdbg.exe</code>).</p><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1010348"></a>Creating the Starter Project</h4></div></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_tutorials_12026_1010349"></a>Project Setup</h5></div></div></div><p class="NormalText">Use the following steps to set up the starter project:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">New</strong></span>.</p></li><li><p class="NormalText">Select the <span><strong class="guilabel">(Other)</strong></span> project type.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Project name</strong></span> box, type <span class="bold"><strong>SeHello</strong></span>.</p></li><li><p class="NormalText">Select the <span><strong class="guilabel">Create project directory from project name</strong></span> option.</p></li><li><p class="NormalText">Change the <span><strong class="guilabel">Location</strong></span> to the path where you want to store the project.</p><div class="mediaobject"><img src="Resources/tutorial_csharp_newproject.png"></div></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span>.</p></li><li><p class="NormalText">Close the Project Properties dialog that automatically appears.</p></li></ol></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_tutorials_12026_1010362"></a>Create and Add a File to the Project</h5></div></div></div><p class="NormalText">Next, use the following steps to create and add a file to the project:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">File </strong></span> &#8594; <span><strong class="guimenuitem">New Item from Template</strong></span>.</p></li><li><p class="NormalText">In the Categories list, under <span><strong class="guilabel">Installed Templates</strong></span>, select <span><strong class="guilabel">CSharp</strong></span>.</p></li><li><p class="NormalText">In the Templates list, select <span><strong class="guilabel">C# Main Entry Point</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Name</strong></span> box, select the default or change the name based on your preference.</p></li><li><p class="NormalText">Select the <span><strong class="guilabel">Add to current project</strong></span> option.</p><div class="mediaobject"><img src="Resources/tutorial_csharp_newtemplateitem.png"></div></li><li><p class="NormalText">Click <span><strong class="guibutton">Add</strong></span>.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> on the Parameter Entry dialog.</p></li><li><p class="NormalText">The new file opens in the editor and also appears in the Source Files project folder. Use the Projects tool window to see project folders and their contents.</p></li><li><p class="NormalText">Add the following code inside <span><strong class="command">Main()</strong></span>:</p><pre class="programlisting">#if DEBUG
Console.WriteLine("Hello World - Debug");
#else
Console.WriteLine("Hello World - Release");
#endif</pre></li><li><p class="NormalText">Save and close the file.</p></li></ol></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_tutorials_12026_1010383"></a>Set Environment Variables</h5></div></div></div><p class="NormalText">Use the steps below to set variables for the workspace. A SlickEdit workspace (<code class="filename">.vpw</code>) is equivalent to a solution (<code class="filename">.sln</code>) in Visual Studio.</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Workspace Properties</strong></span>.</p></li><li><p class="NormalText">Click the <span><strong class="guibutton">Environment</strong></span> button.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">Set Environment Variable</strong></span>.</p></li><li><p class="NormalText">In the Name box, type <span class="bold"><strong>DOTNETDIR</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Value</strong></span> box, specify your .NET framework 
              that you want to use for the C# compiler, for example, 
              <code class="filename">C:\Windows\Microsoft.NET\Framework\v2.0.50727</code>. To use an existing 
              environment variable in the definition of the workspace environment, use the %(VARIABLE) 
              syntax, not the VARIABLE% syntax, for example, 
              <code class="filename">%(WINDIR)\Microsoft.NET\Framework\v2.0.50727</code>. Be sure to select 
              environment variable names that do not already exist.</p></li><li><p class="NormalText">Optionally, create another variable named <span class="bold"><strong>WINSDKDIR</strong></span>, and point it to the Windows SDK or .NET Framework SDK, for example, <code class="filename">C:\Program Files\Microsoft SDKs\Windows\v6.0</code>. This should be a directory where the <code class="filename">mdbg.exe</code> managed code debugger can be found.</p><div class="mediaobject"><img src="Resources/tutorial_csharp_envvariables.png"></div></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span>.</p></li><li><p class="NormalText">Close and reopen the workspace to set the environment variables.</p></li></ol></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_43228"></a>
        <a name="sect_tutorials_12026_1010398"></a>Setting Up the Release Build</h4></div></div></div><p class="NormalText">Once you've set the environment variables, complete the following steps to 
        configure the commands for building a release version:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Properties</strong></span>.</p></li><li><p class="NormalText">In the<span><strong class="guilabel"> Settings for</strong></span> box, select <span><strong class="guilabel">Release</strong></span>.</p></li><li><p class="NormalText">Click to display the <span><strong class="guilabel">Tools tab</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Tool name</strong></span> box, remove both <span><strong class="guilabel">Compile</strong></span> and <span><strong class="guilabel">Rebuild</strong></span> by selecting them and clicking the red X button. The remaining tools are Build, Debug, and Execute.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Tool name</strong></span> box, select the <span><strong class="guilabel">Build</strong></span> tool.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Command line</strong></span> box, type the following, replacing <code class="filename">SeHello.exe</code> with your own executable name:</p><pre class="programlisting">%(DOTNETDIR)\csc.exe /warn:3 /target:exe /define:TRACE /debug- /out:%bdSeHello.exe %{*.cs}</pre><p class="NormalText">The <span><strong class="command">%bd</strong></span> in the above command line is a variable that represents the build output directory, in this case <span class="bold"><strong>Release\</strong></span>. The <span><strong class="command">%{*.cs}</strong></span> construct specifies all project files that end with the <code class="filename">.cs</code> extension.</p></li><li><p class="NormalText">Make sure the <span><strong class="guilabel">Run from dir</strong></span> box contains <span><strong class="command">%rw</strong></span>, which specifies the build should run from the project's working directory.</p></li><li><p class="NormalText">Make sure the <span><strong class="guilabel">Capture output</strong></span> and <span><strong class="guilabel">Output to build window</strong></span> options are selected, so the output is captured and displayed in the Build tool window.</p><div class="mediaobject"><img src="Resources/tutorial_csharp_buildrelease.png"></div></li><li><p class="NormalText">Back in the <span><strong class="guilabel">Tool name</strong></span> box, select the <span class="bold"><strong>Execute</strong></span> tool.</p></li><li><p class="NormalText">Change the command line to <span class="bold"><strong>"SeHello.exe"</strong></span> (including quotes), replacing <span><strong class="command">SeHello.exe</strong></span> with the name of the executable specified in Step 6 above.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Run from dir</strong></span> box, change the option to <span><strong class="command">%bd</strong></span> (which represents the build output directory).</p></li><li><p class="NormalText">Make sure the <span><strong class="guilabel">Capture output</strong></span> and <span><strong class="guilabel">Output to build window</strong></span> options are selected.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> to save your settings and close the Project Properties dialog.</p></li></ol></div><p class="NormalText">You can now execute a build and see the output of the C# compiler by clicking <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span> from the main menu. Once successful, you can run the console program and display the "Hello World-Release" results by clicking <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Execute</strong></span> from the main menu. </p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1010420"></a>Setting Up the Debug Build</h4></div></div></div><p class="NormalText">To configure commands for a debug build, complete the following steps:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>.</p></li><li><p class="NormalText">Click the <span><strong class="guibutton">Configurations</strong></span> button.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">New</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">New config name</strong></span> box, type <span class="bold"><strong>Debug</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Copy settings from</strong></span> box, make sure <span class="bold"><strong>Release</strong></span> is selected.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> to create the Debug config, and dismiss all of the dialogs.</p></li><li><p class="NormalText">On the Project Properties dialog, click to display the <span><strong class="guilabel">Tools tab</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Settings for</strong></span> box, select <span><strong class="guilabel">Debug</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Tool name</strong></span> box, select the <span><strong class="guilabel">Build</strong></span> tool.</p></li><li><p class="NormalText">In the Command line box, type the following, replacing <code class="filename">SeHello.exe</code> with your own executable name:</p><pre class="programlisting">%(DOTNETDIR)\csc.exe /warn:3 /target:exe /define:DEBUG;TRACE /debug+ /out:%bdSeHello.exe %{*.cs}</pre><p class="NormalText">Adding the DEBUG define and changing <span><strong class="command">/debug-</strong></span> to <span><strong class="command">/debug+</strong></span> are the only changes between the Release and Debug configuration command lines.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Tool name</strong></span> box, select the <span><strong class="guilabel">Execute</strong></span> tool.</p></li><li><p class="NormalText">Set up the <span><strong class="guilabel">Execute</strong></span> tool the same as you did in Step 9 for the Release configuration (see <a href="ch13.htm#sect_tutorials_12026_43228">Setting Up the Release Build</a>).</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> to save your settings and close the Project Properties dialog.</p></li><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Set Active Configuration</strong></span> and select <span><strong class="guilabel">Debug</strong></span>.</p></li></ol></div><p class="NormalText">You can now execute the build by clicking <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span> from the main menu. Once successful, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Execute</strong></span> to see the "Hello World - Debug" output in the Build tool window. </p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1010442"></a>Handling Complex Build Commands</h4></div></div></div><p class="NormalText">A small console application like this one doesn't have any extensive dependencies, and most of the default options for the C# compiler are fine. However, more complex projects will require many more options to be passed on the command line. For these cases, it can be useful to create an options file for all of the command line switches. To do this:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">File </strong></span> &#8594; <span><strong class="guimenuitem">New</strong></span> to create a new text file and add it to the project. For this example, we are creating the command line options for the Debug build in a file called <code class="filename">Debug.opts</code>.</p></li><li><p class="NormalText">Insert the following into the new file. This should match your first few options on the Debug build command line:</p><pre class="programlisting">/warn:3 /target:exe /define:DEBUG;TRACE /debug+</pre></li><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>.</p></li><li><p class="NormalText">Click to display the <span><strong class="guilabel">Tools</strong></span> tab.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Settings for</strong></span> box, select the <span><strong class="guilabel">Debug</strong></span> configuration.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Tool name</strong></span> box, select the <span><strong class="guilabel">Build</strong></span> tool.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Command line</strong></span> box, type the following, where <span class="bold"><strong>SeHello.exe</strong></span> is your own executable name:</p><pre class="programlisting">%(DOTNETDIR)\csc.exe @Debug.opts /out:%bdSeHello.exe %{*.cs}</pre></li><li><p class="NormalText">Close the Project Properties dialog.</p></li><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span> to make sure the options file was correctly read.</p></li></ol></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1010455"></a>Setting Up the Console Debugger</h4></div></div></div><p class="NormalText">Optionally, to set up the console debugger, complete the following steps. This demonstrates how to hook up an external tool, and how it can be used interactively inside the Build tool window.</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>.</p></li><li><p class="NormalText">Click to display the <span><strong class="guilabel">Tools tab</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Settings for</strong></span> box, select <span><strong class="guilabel">Debug</strong></span>.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Tool name</strong></span> box, select the <span><strong class="guilabel">Debug</strong></span> tool.</p></li><li><p class="NormalText">In the <span><strong class="guilabel">Command line</strong></span> box, type the following, where <span class="bold"><strong>SeHello.exe</strong></span> is the name of your own executable:</p><pre class="programlisting">%(WINSDKDIR)\Bin\mdbg.exe SeHello.exe</pre></li><li><p class="NormalText">Make sure <span><strong class="guilabel">Run from dir</strong></span> is set to <span><strong class="command">%bd</strong></span>.</p></li><li><p class="NormalText">Make sure the <span><strong class="guilabel">Capture output</strong></span> and <span><strong class="guilabel">Output to build window</strong></span> options are selected.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> to save your settings and close the Project Properties dialog.</p></li><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Show Build</strong></span>. The Build 
            tool window now has focus with a blinking cursor just after the first 
            <span><strong class="command">mdbg&gt;</strong></span> prompt.</p></li><li><p class="NormalText">In the Build window, type the following commands in order, pressing <span><strong class="keycap">Enter</strong></span> after each one:</p></li></ol></div><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span class="bold"><strong></strong></span>
            <span><strong class="command">print args</strong></span> - To show the value of the <span><strong class="command">args</strong></span> variable.</p></li><li><p class="NormalText">
            <span class="bold"><strong></strong></span>
            <span><strong class="command">next</strong></span> - To do a step over.</p></li><li><p class="NormalText">
            <span class="bold"><strong></strong></span>
            <span><strong class="command">go</strong></span> - To continue execution.</p></li><li><p class="NormalText">
            <span class="bold"><strong></strong></span>
            <span><strong class="command">quit</strong></span> - To quit the debugger. The debugger must be stopped in order for SlickEdit to regain control of the Build window.</p></li></ul></div><p class="NormalText">The entire debug session output should look similar to the following:</p><pre class="programlisting">C:\Dev\Lab\TestProjects\SeHello\Debug</pre><p class="NormalText">&gt; C:\WinSDK\Bin\mdbg.exe SeHello.exe</p><pre class="programlisting">MDbg (Managed debugger) v2.0.50727.312 (rtmLHS.050727-3100) started.
Copyright (C) Microsoft Corporation. All rights reserved.
For information about commands type "help";
to exit program type "quit".
run SeHello.exe
STOP: Breakpoint Hit
16: static void Main(string[] args) {
[p#:0, t#:0] mdbg&gt; <span class="emphasis"><em>print args</em></span>
args=array [0]
[p#:0, t#:0] mdbg&gt; <span class="emphasis"><em>next</em></span>
19: Console.WriteLine("Hello World - Debug");
[p#:0, t#:0] mdbg&gt; <span class="emphasis"><em>go</em></span>
Hello World - Debug
STOP: Process Exited
mdbg&gt; <span class="emphasis"><em>quit</em></span>
C:\Dev\Lab\TestProjects\SeHello\Debug
&gt;</pre></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_tutorials_12026_20268"></a>
      <a name="sect_tutorials_12026_1007431"></a>
      <a class="indexterm" name="sect_tutorials_03ACFB96_409E"></a>Hello World Tutorial (Java)</h3></div></div></div><p class="NormalText">This tutorial outlines the steps to create, build, and run a sample Hello World program for Java projects. The sample Java program prints the text <span><strong class="command">Hello World</strong></span> to the standard output.</p><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007433"></a>Create the Project</h4></div></div></div><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">New</strong></span>.</p></li><li><p class="NormalText">On the <span><strong class="guilabel">Project</strong></span> tab, click to expand <span><strong class="guilabel">Java</strong></span>, then select <span><strong class="guilabel">Java - Empty Project</strong></span>.</p></li><li><p class="NormalText">Type the <span><strong class="guilabel">Project name</strong></span>, <span class="bold"><strong>HelloWorld</strong></span>. If you already completed the C/C++ tutorial you will need to enter a different name, like <span class="bold"><strong>HelloWorldJava</strong></span>.</p></li></ol></div><p class="NormalText">This creates a workspace and project by the name <span class="bold"><strong>HelloWorld</strong></span> at <code class="filename">C:\HelloWorld</code>.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007438"></a>Create the File</h4></div></div></div><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">New</strong></span>.</p></li><li><p class="NormalText">Select the <span><strong class="guilabel">File</strong></span> tab.</p></li><li><p class="NormalText">Select <span><strong class="guilabel">Java</strong></span> from the list and enter a <span><strong class="guilabel">Filename</strong></span>, <code class="filename">HelloWorld.java</code>. Be sure to type the file extension.</p></li><li><p class="NormalText">Check the <span><strong class="guilabel">Add to Project</strong></span> check box or the file will be created but will not be able to be built.</p></li></ol></div><p class="NormalText">By default the file is created in the directory created in the previous step.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007444"></a>Edit the File</h4></div></div></div><p class="NormalText">Edit the file to enter a Hello World program, as shown in the following example:</p><pre class="programlisting">public class HelloWorld {
    public static void main (String args[]) {
        System.out.println("hello world");
    }
}</pre></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007455"></a>Build the Project</h4></div></div></div><p class="NormalText">From the main menu, select <span><strong class="guimenu">Build</strong></span>.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_tutorials_12026_1007457"></a>Run the Program</h4></div></div></div><p class="NormalText">From the main menu, click <span><strong class="guimenu">Run </strong></span> &#8594; <span><strong class="guimenuitem">Execute</strong></span>. The words <span><strong class="command">Hello World</strong></span> are displayed in the window.</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_tutorials_12026_35377"></a>
      <a name="sect_tutorials_12026_1011885"></a>
      <a class="indexterm" name="sect_tutorials_2332200A_DC3E"></a>Vim Tutorial</h3></div></div></div><p class="NormalText">SlickEdit® provides an emulation mode for the Vim text editor. If you want 
      to learn Vim, you can use the <span><strong class="command">vimtutor</strong></span> command. Most Vim installations come with 
      this command, which displays a special "learn-by-doing" practice file in the editor that you can 
      actually edit as you learn how to use the Vim commands. This file has been customized for SlickEdit 
      users. </p><p class="NormalText">To use the command, open the SlickEdit command line, then type the command and press <span><strong class="keycap">Enter</strong></span>. The practice file is displayed in the editor. Each time you use the <span><strong class="command">vimtutor</strong></span> command, SlickEdit creates a fresh copy of this file.</p><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Tip</h3><p class="CellBody"></p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">You will be prompted to switch to the Vim emulation when you invoke the command if the editor is set to a different emulation. See <a href="ch04s02.htm#sect_emulations_12371_16068">Changing Emulations</a> for more information.</p></li><li><p class="NormalText">When in the Vim emulation, you can open the SlickEdit command line with <span><strong class="keycap">Ctrl</strong></span>+<span><strong class="keycap">A</strong></span>, or in any emulation, by clicking in the message area with the mouse. See <a href="ch03s04.htm#sect_usingcommandline_13192_44198">Activating the Command Line</a> for more information.</p></li></ul></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_tutorials_12026_37729"></a>
      <a name="sect_tutorials_12026_1003911"></a>Creating and Distributing Custom Toolbars</h3></div></div></div><p class="NormalText">Use the following steps to write a macro which will load a custom toolbar that you can easily distribute to other users:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">Create a new form by clicking <span><strong class="guimenu">Macro </strong></span> &#8594; <span><strong class="guimenuitem">New Form</strong></span>.</p></li><li><p class="NormalText">Change the form's name by editing the <span><strong class="command">name</strong></span> property. For this example, we will name the form "mytoolbar1". You will need to remember the name of the form.</p></li><li><p class="NormalText">Save the new form by pressing <span><strong class="keycap">Ctrl</strong></span>+<span><strong class="keycap">S</strong></span>, or, right-click on the form and select <span><strong class="guimenu">Save Form</strong></span>.</p></li><li><p class="NormalText">Close the form and its properties.</p></li><li><p class="NormalText">Create a new toolbar. To do this, click <span><strong class="guimenu">View </strong></span> &#8594; <span><strong class="guimenuitem">Toolbars </strong></span> &#8594; <span><strong class="guimenuitem">Customize</strong></span>, then make sure the Toolbars tab is selected and click <span><strong class="guibutton">New</strong></span>. Enter a 
          new toolbar name in the <span><strong class="guilabel">Tool Bar Name</strong></span> field. This is the caption that will 
          be used on the title bar of your toolbar when it is floating (i.e. not docked). For this 
          example, we will use "My Toolbar 1". Next, expand the dialog by clicking the 
          <span><strong class="guibutton">Advanced</strong></span>  button. In the <span><strong class="guilabel">Form Name</strong></span> box, enter the 
          form name that you just created in Step 1, then click <span><strong class="guibutton">OK</strong></span>. The new 
          toolbar is displayed as floating.</p></li><li><p class="NormalText">Add buttons to the new toolbar by dragging and dropping them onto the new toolbar from the <span><strong class="guilabel">Categories tab</strong></span> of the <span><strong class="guilabel">Toolbars</strong></span> options page (<span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Options </strong></span> &#8594; <span><strong class="guimenuitem">Appearance </strong></span> &#8594; <span><strong class="guimenuitem">Toolbars</strong></span>).</p></li><li><p class="NormalText">Activate the SlickEdit® command line (see <a href="ch03s04.htm#sect_usingcommandline_13192_44198">Activating the Command Line</a>) and run the <span><strong class="command">save_config </strong></span>command.</p></li><li><p class="NormalText">Open the file <code class="filename">vusrobjs.e</code> (this file resides in your SlickEdit config directory, which can be found by going to <span><strong class="guimenu">Help </strong></span> &#8594; <span><strong class="guimenuitem">About SlickEdit</strong></span>). An example of this file is located in the <code class="filename">docs/samples</code> installation subdirectory.</p></li><li><p class="NormalText">Copy all of the code which is related to your new toolbar as well as the <span><strong class="command">defmain()</strong></span> function at the bottom of the file, and paste it into a new file with a <code class="filename">.e</code> extension. An example of this file is <code class="filename">newToolbar.e</code>, located in the <code class="filename">docs/samples</code> installation subdirectory.</p></li><li><p class="NormalText">Add the following include statements to the very top of the file:</p><pre class="programlisting">#include 'slick.sh'
#include 'toolbar.sh'</pre><p class="NormalText">Be sure that <code class="filename">slick.sh</code> is included first.</p></li><li><p class="NormalText">At the end of the <span><strong class="command">defmain()</strong></span> method, add the following line directly below the call to <span><strong class="command">_config_modify_flags</strong></span> (as seen in <code class="filename">newToolbar.e</code>):</p><pre class="programlisting">_tbAddForm("mytoolbar1", TBFLAG_NEW_TOOLBAR,false,0,true);
// Where mytoolbar1 is the name of your new form and _not_ the name of your toolbar.</pre><p class="NormalText">This will actually add the toolbar to SlickEdit and update the SlickEdit state file.</p></li><li><p class="NormalText">Save the file.</p></li><li><p class="NormalText">This macro (remember that it ends in <code class="filename">.e</code>) will not compile like standard macros because of the <span><strong class="command">defmain()</strong></span> call. Therefore, activate the SlickEdit command line and enter the full path to the newly created macro file (in this case, <code class="filename">newToolbar.e</code>). This will load the macro and the new toolbar.</p></li></ol></div><p class="NormalText">In order to share this toolbar, distribute the new macro file that you created in Step 10, and have each user run it on the SlickEdit command line as described in Step 14. The new toolbar can be displayed by clicking <span><strong class="guimenu">View </strong></span> &#8594; <span><strong class="guimenuitem">Toolbars </strong></span> &#8594; <span><strong class="guimenuitem">My Toolbar 1</strong></span>.</p><p class="NormalText">Your final macro should look very similar to <code class="filename">newToolbar.e</code>. Of course you can add more than one toolbar to the macro file using the same steps.</p><p class="NormalText"></p></div></div></div></body></html>
