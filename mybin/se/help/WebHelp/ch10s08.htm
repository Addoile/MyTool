<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Regular Expressions</title><link rel="stylesheet" href="slickedit_help.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.71.1"><link rel="start" href="index.htm" title="Welcome to SlickEdit 2013"><link rel="up" href="ch10.htm" title="Chapter 10.  Tools and Utilities"><link rel="prev" href="ch10s07.htm" title="FTP"><link rel="next" href="ch10s09.htm" title="Using the Calculator and Math Commands"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><p class="HeaderText"><a href="index.htm#contents">Contents</a> : <a href="ix01.htm">Index</a> : <a href="search.htm">Search</a></p><hr><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="sect_regularexpressions_13949_91962"></a>
    <a class="indexterm" name="sect_regularexpressions_63126_51490"></a>
    <a class="indexterm" name="sect_regularexpressions_40744_94002"></a>
    Regular Expressions</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_regularexpressions_13949_1006536"></a>Overview</h3></div></div></div><p class="NormalText">Regular expressions are patterns of text used to match and manipulate strings in your code. These patterns are expressed with combinations of characters defined by the regular expression syntax being used. A regular expression is sometimes referred to as a "regex".</p><p class="NormalText">Use regular expressions in your search and replace operations when you find normal search/replace too limiting. For example, with regular expressions, you can:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">Find quoted strings.</p></li><li><p class="NormalText">Find blank lines.</p></li><li><p class="NormalText">Find words starting at the beginning of lines.</p></li><li><p class="NormalText">Find two words separated by any number of spaces or other text.</p></li></ul></div><p class="NormalText">
      SlickEdit® supports five types of regular expression syntax:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
          <a href="ch10s08.htm#Brief">Brief</a>
        </p></li><li><p class="NormalText">
          <a href="ch10s08.htm#Perl">Perl</a>
        </p></li><li><p class="NormalText">
          <a href="ch10s08.htm#SlickEdit">SlickEdit</a>
        </p></li><li><p class="NormalText">
          <a href="ch10s08.htm#UNIX">UNIX</a>
        </p></li><li><p class="NormalText">
          <a href="ch10s08.htm#Wildcards">Wildcards</a>
        </p></li></ul></div><p class="NormalText">
      SlickEdit also provides a Regex Evaluator that you can use to interactively create, save, and re-use tests of regular expressions. See <a href="ch10s08.htm#sect_regularexpressions_13949_51375">The Regex Evaluator</a> for more information.</p><p class="NormalText">See <a href="ch10s08.htm#sect_regularexpressions_13949_51522">Regular Expression Syntax</a> for charts of the expressions in syntax. Unicode regular expression categories and character blocks are also supported. See <a href="ch10s08.htm#sect_regularexpressions_13949_18610">Unicode Categories and Character Blocks</a> for more information. </p><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Note</h3><p class="CellBody"></p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">This documentation is not meant to be an exhaustive resource on regular expressions. Rather, we will present basic information, syntax charts, and examples. For novice users, there are many books and Web sites that go into more detail about this topic.</p></li><li><p class="NormalText">While regular expressions in SlickEdit primarily match the syntax for that language, there are some differences between our implementation and those elsewhere.</p></li></ul></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_regularexpressions_13949_24065"></a>
      <a name="sect_regularexpressions_13949_1006570"></a>Using Regular Expressions in SlickEdit®</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_1006571"></a>Specifying the Syntax to Use</h4></div></div></div><p class="NormalText">All search and replace commands, the Find and Replace tool window, and incremental search support regular expressions. For search and replace commands and the tool window, you can specify the regular expression syntax to use through specific options. A global option is available to specify the default syntax to use when you invoke these features or when you use incremental search. </p><p class="NormalText">For example:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span class="bold"><strong>Search and replace commands</strong></span> - When using the search commands <span><strong class="command">/ </strong></span>(slash) and <span><strong class="command">find</strong></span>, or the replace commands <span><strong class="command">c</strong></span> and <span><strong class="command">replace</strong></span>, you can use the following options to specify regular expression syntax:</p><div class="itemizedlist"><ul type="circle"><li><p class="NormalText">
                <span class="bold"><strong></strong></span>Use <span><strong class="command">B</strong></span> to interpret the search string as Brief regular expression.</p></li><li><p class="NormalText">
                <span class="bold"><strong></strong></span>Use the <span><strong class="command">L </strong></span>option to interpret the string as a Perl regular expression.</p></li><li><p class="NormalText">
                <span class="bold"><strong></strong></span>Use <span><strong class="command">R</strong></span> to interpret the string as a SlickEdit regular expression.</p></li><li><p class="NormalText">
                <span class="bold"><strong></strong></span>Use the <span><strong class="command">U </strong></span>option to interpret the string as a UNIX regular expression.</p></li></ul></div></li><li><p class="NormalText">
            <span class="bold"><strong>Find and Replace tool window</strong></span> - When using the tool window, select <span><strong class="guilabel">Use</strong></span> in the <span><strong class="guilabel">Search options</strong></span> box, and then pick the syntax to use from the drop-down list.</p></li><li><p class="NormalText">
            <span class="bold"><strong>Incremental search</strong></span> - When using incremental search, press <span><strong class="keycap">Ctrl</strong></span>+<span><strong class="keycap">T</strong></span> to toggle regular expression searching on and off. The syntax that will be used is based on the global syntax setting.</p></li></ul></div><p class="NormalText">To set the global option, from the main menu, click <span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Options</strong></span>, expand <span><strong class="guilabel">Editing</strong></span> and select <span><strong class="guimenu">Search</strong></span>. Set the <span><strong class="guilabel">Regular expression</strong></span> option to <span><strong class="guilabel">True</strong></span> and select the syntax you want to use from the <span><strong class="guilabel">Expression type</strong></span> drop-down list.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_40014"></a>
        <a name="sect_regularexpressions_13949_1006589"></a>
        <a class="indexterm" name="sect_regularexpressions_65C895E3_0D5D"></a>
        <a class="indexterm" name="sect_regularexpressions_CBB1B6FC_F9C0"></a>
        <a class="indexterm" name="sect_regularexpressions_1A9486AE_D7D3"></a>Minimal versus Maximal Matching</h4></div></div></div><p class="NormalText">If you are using tagged expressions or regular expressions to perform a search and replace, it is important to understand the difference between the minimal and maximal operators.</p><p class="NormalText">Take, for example, a line of text which contains a DOS file name: <code class="filename">\path1\path2\path3\name.ext</code>. </p><p class="NormalText">Based on the syntax, the following regular expressions match the string <span><strong class="command">\path1\</strong></span>:</p><div class="informaltable"><a name="table_7d1ba173-e362-4966-901b-23a03f93ec2c"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Syntax</p>
              </th><th>
                <p class="CellHeading">Expression</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">Brief</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">&lt;\\*\\</strong></span>
                </p>
              </td></tr><tr><td>
                <p class="CellBody">Perl and UNIX</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">^\\.*?\\</strong></span>
                </p>
              </td></tr><tr><td>
                <p class="CellBody">SlickEdit</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">^\\?*\\</strong></span>
                </p>
              </td></tr></tbody></table></div><p class="NormalText">The following regular expressions, which use the maximal operator, match the string <span><strong class="command">\path\path2\path3\</strong></span>:</p><div class="informaltable"><a name="table_0955dda8-ab2c-49d3-bad8-eadd1bfa5135"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Syntax</p>
              </th><th>
                <p class="CellHeading">Expression</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">Brief</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">&lt;\\\:*\\</strong></span>
                </p>
              </td></tr><tr><td>
                <p class="CellBody">Perl and UNIX</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">^\\.*\\</strong></span>
                </p>
              </td></tr><tr><td>
                <p class="CellBody">SlickEdit</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">^\\?@\\</strong></span>
                </p>
              </td></tr></tbody></table></div><p class="NormalText">As a rule of thumb, the following minimal matching operators are generally used after a less-specific regular expression such as <span><strong class="command">?</strong></span> in Brief/SlickEdit or <span><strong class="command">.</strong></span><span><strong class="command"></strong></span>in UNIX:</p><div class="informaltable"><a name="table_49acf899-29a4-4a07-933f-d5cb7cefe212"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Syntax</p>
              </th><th>
                <p class="CellHeading">Operators</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">Brief</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">@</strong></span> and <span><strong class="command">+</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">Perl and UNIX</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">*?</strong></span> and <span><strong class="command">+?</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">SlickEdit</p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">*</strong></span> and <span><strong class="command">+</strong></span></p>
              </td></tr></tbody></table></div><p class="NormalText">Use the maximal matching operators after a regular expression which matches something more specific. For example, to search for a string of digits and prefix each matched string with the character <span><strong class="command">$</strong></span>, specify the following expressions:</p><div class="informaltable"><a name="table_79c5e2b3-ef29-4375-b060-dbe5a302bf42"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Syntax</p>
              </th><th>
                <p class="CellHeading">Expression</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">Brief</p>
              </td><td>
                <p class="CellBody">Search for: <span class="bold"><strong>{[0-9]\:+}</strong></span></p>
                <p class="CellBody">Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>$\0</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">Perl and UNIX</p>
              </td><td>
                <p class="CellBody">Search for:<span><strong class="command"></strong></span><span class="bold"><strong>([0-9]+)</strong></span></p>
                <p class="CellBody">Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>$\1</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">SlickEdit</p>
              </td><td>
                <p class="CellBody">Search for: <span class="bold"><strong>{[0-9]#}</strong></span></p>
                <p class="CellBody">Replace with: <span class="bold"><strong>$#0</strong></span></p>
              </td></tr></tbody></table></div><p class="NormalText">If the minimal matching operator (<span><strong class="command">+ </strong></span>in Brief/SlickEdit syntax, <span><strong class="command">+?</strong></span> in Perl/UNIX) was used in the search string instead of the maximal matching operator (<span><strong class="command">\:@</strong></span> in Brief, <span><strong class="command">+</strong></span> in Perl/UNIX, <span><strong class="command">#</strong></span> in SlickEdit), the above search and replace would prefix each digit in the entire file with a <span><strong class="keycap">$</strong></span> character.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_41450"></a>
        <a name="sect_regularexpressions_13949_1006671"></a>
        <a class="indexterm" name="sect_regularexpressions_0376BEC0_E1CF"></a>
        <a class="indexterm" name="sect_regularexpressions_4F19CD3B_05A4"></a>Using Tagged Expressions</h4></div></div></div><p class="NormalText">When you use regular expressions to search for a string, you will often want the replace string to depend on what was found. Use tagged expressions to insert parts of what is found into the replace string. Tagged expressions are denoted based on the syntax:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span class="bold"><strong>Brief syntax </strong></span>- Use <span><strong class="command">{ }</strong></span> (curly braces) to denote a tagged expression in the search string. The replace string specifies tagged expressions with a <span><strong class="command">\</strong></span> (backslash) followed by a tagged expression number 0-9. Count the <span><strong class="command">{ </strong></span>(left braces)<span><strong class="command"></strong></span>in the search string to determine a tagged expression number. The first tagged expression is <span><strong class="command">\0</strong></span>.</p></li><li><p class="NormalText">
            <span class="bold"><strong>UNIX syntax </strong></span>- Use <span><strong class="keycap">( )</strong></span> (parentheses) to denote a tagged expression in the search string. The replace string specifies tagged expressions with a <span><strong class="keycap">\</strong></span> (backslash) followed by a tag group number 1-9. Count the <span><strong class="command">(</strong></span> (left parenthesis) in the search string to determine a tagged expression number. The first tagged expression is <span><strong class="command">\1</strong></span> and the last is <span><strong class="command">\0</strong></span>.</p></li><li><p class="NormalText">
            <span class="bold"><strong>Perl syntax </strong></span>- Use <span><strong class="keycap">( )</strong></span> (parentheses) to denote a tagged expression in the search string. The replace string specifies tagged expressions with a <span><strong class="keycap">\</strong></span> (backslash) or <span><strong class="keycap">$</strong></span> (dollar sign) followed by a tag group number 1-9. Count the <span><strong class="command">(</strong></span> (left parenthesis) in the search string to determine a tagged expression number. The first tagged expression is <span><strong class="command">\1</strong></span> and the last is <span><strong class="command">\0</strong></span>.</p></li><li><p class="NormalText">
            <span class="bold"><strong>
              SlickEdit® syntax</strong></span> - Use <span><strong class="command">{ }</strong></span> (curly braces) to denote a tagged expression in the search string. The replace string specifies tagged expressions with a <span><strong class="command">#</strong></span> (pound sign) followed by a tagged expression number 0-9. Count the <span><strong class="command">{</strong></span> (left braces) in the search string to determine a tagged expression number. The first tagged expression is <span><strong class="command">#0</strong></span>.</p></li></ul></div><p class="NormalText">Examples of Tagged Expressions</p><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="section_895b876e-5e48-4388-8bb9-39d169b19854"></a>Example 1: Replace Occurrences</h5></div></div></div><p class="NormalText">The expressions in the table below replace occurrences of "if" and "while" with "xify" and "xwhiley." Unmatched groups are null. Note that the <span><strong class="command">\1</strong></span> in Brief syntax, <span><strong class="command">\2</strong></span> in Perl/UNIX, and <span><strong class="command">#1</strong></span> in SlickEdit syntax are replaced with null.</p><div class="informaltable"><a name="table_cefa2d0e-4e8b-4cb2-9b95-ca54886e038c"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">Syntax</p>
                </th><th>
                  <p class="CellHeading">Expression</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">Brief</p>
                </td><td>
                  <p class="CellBody">Search for: <span class="bold"><strong>{{if}|while}}</strong></span></p>
                  <p class="CellBody">Replace with: <span class="bold"><strong>x\0y\1</strong></span></p>
                </td></tr><tr><td>
                  <p class="CellBody">Perl/UNIX</p>
                </td><td>
                  <p class="CellBody">Search for: <span class="bold"><strong>(if|while)</strong></span></p>
                  <p class="CellBody">Replace with: <span class="bold"><strong>x\1y\2</strong></span></p>
                </td></tr><tr><td>
                  <p class="CellBody">SlickEdit</p>
                </td><td>
                  <p class="CellBody">Search for: <span class="bold"><strong>{if|while}</strong></span></p>
                  <p class="CellBody">Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>x#0y#1</strong></span></p>
                </td></tr></tbody></table></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="section_b7a6212f-4a10-4c48-9a01-bde260515d43"></a>Example 2: Reverse Text on Lines Containing a Comma</h5></div></div></div><p class="NormalText">The expressions in the table below reverse text on lines containing a comma. Lines with "abc,def" will be changed to "def,abc". Notice that the Perl/UNIX regular expression search string uses a <span><strong class="command">*?</strong></span> minimal matching operator, so the comma actually matches the first comma in the line and not the last.</p><div class="informaltable"><a name="table_d2c95d36-d40e-49cc-ba9a-67d4a2d9504f"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">Syntax</p>
                </th><th>
                  <p class="CellHeading">Expression</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">Brief</p>
                </td><td>
                  <p class="CellBody">Search for:<span><strong class="command"></strong></span><span class="bold"><strong>^{*},{*}$</strong></span></p>
                  <p class="CellBody">Replace with: <span class="bold"><strong>\1,\0</strong></span></p>
                </td></tr><tr><td>
                  <p class="CellBody">Perl/UNIX</p>
                </td><td>
                  <p class="CellBody">Search for: <span class="bold"><strong>^(.*?),(.*)$</strong></span></p>
                  <p class="CellBody">Replace with: <span class="bold"><strong>\2,\1</strong></span></p>
                </td></tr><tr><td>
                  <p class="CellBody">SlickEdit</p>
                </td><td>
                  <p class="CellBody">Search for:<span><strong class="command"></strong></span><span class="bold"><strong>^{?*},{?*}$</strong></span></p>
                  <p class="CellBody">Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>#1,#0</strong></span></p>
                </td></tr></tbody></table></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_1006721"></a>Replacing with Regular Expressions</h4></div></div></div><p class="NormalText">When using regular expressions, some characters have a different meaning when used in the replace string, depending on the syntax: </p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span class="bold"><strong>Brief</strong></span>
            <span><strong class="command"></strong></span>- The backslash character (<span><strong class="keycap">\</strong></span>) in the replace string has the same meaning as in the search string except that <span><strong class="command">\c</strong></span> and <span><strong class="command">\:</strong></span><span class="emphasis"><em>char </em></span>are not supported.</p></li><li><p class="NormalText">
            <span class="bold"><strong>UNIX</strong></span> - A backslash in the replace string has the same meaning as in the search string except that <span><strong class="command">\c</strong></span> and <span><strong class="command">\:</strong></span><span class="emphasis"><em>char</em></span> are not supported.</p></li><li><p class="NormalText">
            <span class="bold"><strong>Perl</strong></span> - A backslash in the replace string has the same meaning as in the search string except that <span><strong class="command">\c</strong></span> and <span><strong class="command">\:</strong></span><span class="emphasis"><em>char</em></span> are not supported. A dollar sign (<span><strong class="keycap">$</strong></span>) must be escaped (<span><strong class="keycap">\$</strong></span>) when replacing a literal <span><strong class="keycap">$</strong></span>.</p></li><li><p class="NormalText">
            <span class="bold"><strong>
              SlickEdit®
            </strong></span> - The pound sign character (<span><strong class="keycap">#</strong></span>) and backslash (<span><strong class="keycap">\</strong></span>) have special meaning in the replace string. A backslash in the replace string has the same meaning as in the search string except that <span><strong class="command">\c</strong></span>, <span><strong class="command">:</strong></span><span class="emphasis"><em>char</em></span>, and <span><strong class="command">\g</strong></span><span class="emphasis"><em>d</em></span> are not supported.</p></li></ul></div><p class="NormalText">See the <a href="ch10s08.htm#sect_regularexpressions_13949_51522">Regular Expression Syntax</a> tables for a list of options for these characters. See <a href="ch10s08.htm#sect_regularexpressions_13949_41450">Using Tagged Expressions</a> for information on specifying tagged expressions in the replace string.</p><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_regularexpressions_13949_1006734"></a>Case Modification in Replace</h5></div></div></div><p class="NormalText">When used in a replace operation, the expressions in the following table can be used to modify the character casing of matched expressions. These work in Brief, Perl, SlickEdit, and UNIX syntaxes.</p><div class="informaltable"><a name="table_9803fb94-e313-4e79-bb8c-1e26550f614a"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">Expression</p>
                </th><th>
                  <p class="CellHeading">Description</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\l</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Convert next character lowercase.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\u</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Convert next character uppercase.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\L</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Convert all characters lowercase until <span><strong class="command">\E</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\U</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Convert all characters uppercase until <span><strong class="command">\E</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\Q</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Replace all characters literally until <span><strong class="command">\E</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\E</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">End all case modification or <span><strong class="command">\Q</strong></span>.</p>
                </td></tr></tbody></table></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_regularexpressions_13949_1006765"></a>Examples of Replacing with Regular Expressions</h5></div></div></div><p class="NormalText">The table below contains some examples of replace operations using regular expressions.</p><div class="informaltable"><a name="table_e1c95d6a-74d9-4405-9baf-1361c1c9a32f"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">Operation</p>
                </th><th>
                  <p class="CellHeading">Expression</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">Search for occurrences of the string "hat" that occur at the end of a line and replace it with "cat".</p>
                </td><td>
                  <p class="CellBody">
                    <span class="bold"><strong>In all syntaxes:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span class="bold"><strong>hat$</strong></span></p>
                  <p class="CellBody">    Replace with: <span class="bold"><strong>cat</strong></span></p>
                </td></tr><tr><td>
                  <p class="CellBody">Delete blank lines.</p>
                </td><td>
                  <p class="CellBody">
                    <span class="bold"><strong>Brief:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span class="bold"><strong>&lt;\n</strong></span></p>
                  <p class="CellBody">    Replace with: (leave blank)</p>
                  <p class="CellBody"></p>
                  <p class="CellBody">
                    <span class="bold"><strong>Perl/SlickEdit/UNIX:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span class="bold"><strong>^\n</strong></span></p>
                  <p class="CellBody">    Replace with: (leave blank)</p>
                </td></tr><tr><td>
                  <p class="CellBody">Replace occurrences of two consecutive blank lines with one.</p>
                </td><td>
                  <p class="CellBody">
                    <span class="bold"><strong>Brief:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span class="bold"><strong>&lt;\n\n</strong></span></p>
                  <p class="CellBody">    Replace with: <span class="bold"><strong>\n</strong></span></p>
                  <p class="CellBody"></p>
                  <p class="CellBody">
                    <span class="bold"><strong>Perl/SlickEdit/UNIX:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span class="bold"><strong>^\n\n</strong></span></p>
                  <p class="CellBody">    Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>\n</strong></span></p>
                </td></tr><tr><td>
                  <p class="CellBody">Search for lines containing "a" and replace the "a" with a formfeed character.</p>
                </td><td>
                  <p class="CellBody">
                    <span class="bold"><strong>Brief:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span class="bold"><strong>&lt;a+$</strong></span></p>
                  <p class="CellBody">    Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>\d12</strong></span></p>
                  <p class="CellBody"></p>
                  <p class="CellBody">
                    <span class="bold"><strong>Perl/UNIX:</strong></span>
                  </p>
                  <p class="CellBody">    Search for:<span><strong class="command"></strong></span><span class="bold"><strong>^a+$</strong></span></p>
                  <p class="CellBody">    Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>\d12</strong></span></p>
                  <p class="CellBody"></p>
                  <p class="CellBody">
                    <span class="bold"><strong>SlickEdit:</strong></span>
                  </p>
                  <p class="CellBody">    Search for:<span><strong class="command"></strong></span><span class="bold"><strong>^a+$</strong></span></p>
                  <p class="CellBody">    Replace with:<span><strong class="command"></strong></span><span class="bold"><strong>\12</strong></span></p>
                </td></tr><tr><td>
                  <p class="CellBody">Select occurrences of "Title:" at the beginning of a line and capitalize the text following "Title:".</p>
                </td><td>
                  <p class="CellBody">
                    <span class="bold"><strong>Brief:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span><strong class="command">&lt;Title: {\:*}</strong></span></p>
                  <p class="CellBody">    Replace with: <span><strong class="command">Title: \U\0</strong></span></p>
                  <p class="CellBody"></p>
                  <p class="CellBody">
                    <span class="bold"><strong>Perl/UNIX: </strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span><strong class="command">^Title: (.*)</strong></span></p>
                  <p class="CellBody">    Replace with: <span><strong class="command">Title: \U\1</strong></span></p>
                  <p class="CellBody"></p>
                  <p class="CellBody">
                    <span class="bold"><strong>SlickEdit:</strong></span>
                  </p>
                  <p class="CellBody">    Search for: <span class="bold"><strong>^Title\: {?@}</strong></span></p>
                  <p class="CellBody">    Replace with: <span class="bold"><strong>Title: \U#0</strong></span></p>
                </td></tr></tbody></table></div></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_regularexpressions_13949_51375"></a>
      <a name="sect_regularexpressions_13949_1006518"></a>
      <a class="indexterm" name="sect_regularexpressions_2A7F59E3_B384"></a>
      <a class="indexterm" name="sect_regularexpressions_FAAAF541_2AE8"></a>
      <a class="indexterm" name="sect_regularexpressions_09B3B4DB_542E"></a>
      <a class="indexterm" name="sect_regularexpressions_E9AD9BE1_2D58"></a>
      <a class="indexterm" name="sect_regularexpressions_1E438D3A_4653"></a>The Regex Evaluator</h3></div></div></div><p class="NormalText">Regular expressions are used to express text patterns for searching. The Regex Evaluator provides the capability to interactively create, save, and re-use tests of regular expressions. </p><p class="NormalText">To access the Regex Evaluator, click <span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Regex Evaluator</strong></span> (or use the <span><strong class="command">activate_regex_evaluator</strong></span> command). Like other tool windows in SlickEdit®, this tool window is dockable. Docking options can be accessed by right-clicking on the tool window's title bar.</p><p class="NormalText">Type some samples of the text you are trying to match in the top portion of the tool window labeled <span><strong class="command">Test Cases</strong></span>. Enter your regular expression pattern in the bottom field. The Regex Evaluator will highlight matched portions of your sample text and identify groups.</p><div class="mediaobject"><img src="Resources/regexevaluator_toolwindow.png"></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_1003356"></a>
        <a class="indexterm" name="sect_regularexpressions_4749F835_C2A1"></a>Entering Test Cases</h4></div></div></div><p class="NormalText">Type your test cases in the <span><strong class="guilabel">Test Cases</strong></span> text box. These test cases will be evaluated as you type your regular expression in the bottom field. A wavy underline will indicate the ranges of text that match the entire expression. Matches are also marked with a yellow arrow that appears in the gutter to the left of the test case. You can hover your mouse on this arrow to see a tool tip which displays the matched expression details. When groups (tagged expressions) are used in your regular expression pattern, the groups will be boxed and highlighted in yellow in the Test Cases section.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_1003358"></a>
        <a class="indexterm" name="sect_regularexpressions_180DFB6B_E3B2"></a>Entering a Regular Expression</h4></div></div></div><p class="NormalText">Enter the regular expression to test in the text field. Use the radio buttons to select the expression syntax that you wish to use: UNIX, SlickEdit®, Brief, or Perl. Click the arrow to the right of the regular expression field to pick from a menu of common syntax and operators.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_1003427"></a>
        <a class="indexterm" name="sect_regularexpressions_7F77CE6D_4F39"></a>Regex Evaluator Options</h4></div></div></div><p class="NormalText">The following options and buttons are available on the Regex Evaluator tool window:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span><strong class="guilabel">Multiline mode</strong></span> - If <span><strong class="guilabel">Multiline mode</strong></span> is selected, rather than searching through the test cases line-by-line, regular expressions will be searched on all lines at once. This is useful for test cases that wrap to the next line. This works just as if you had entered <span><strong class="command">\om</strong></span> on the SlickEdit® command line.</p></li><li><p class="NormalText">
            <span><strong class="guilabel">Case sensitive</strong></span> - If <span><strong class="guilabel">Case sensitive</strong></span> is selected, the regular expression search will be case sensitive. This option is on by default.</p></li><li><p class="NormalText">
            <span><strong class="guibutton">New expression button</strong></span> - To clear the tool window of all entries in order to start a new evaluation, click the button at the top of the tool window labeled <span><strong class="guibutton">New expression</strong></span>.</p></li><li><p class="NormalText">
            <span><strong class="guibutton">Open a saved expression button</strong></span> - To open an expression that you have already saved, click the folder button at the top of the tool window labeled <span><strong class="guilabel">Open a saved expression</strong></span>.</p></li><li><p class="NormalText">
            <span><strong class="guilabel">Save the current expression button</strong></span> - To save the current expression, click the diskette button at the top of the tool window labeled <span><strong class="guilabel">Save the current expression</strong></span>. Both the expression and the test cases will be saved to a file. The default extension is <code class="filename">.regx</code>.</p></li><li><p class="NormalText">
            <span><strong class="guibutton">Save as button</strong></span> - To save the current expression with a different file name than what has previously been saved, click the button at the top of the tool window labeled <span><strong class="guibutton">Save the current expression as</strong></span>.</p></li></ul></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_regularexpressions_13949_51522"></a>
      <a name="sect_regularexpressions_13949_1006898"></a>
      <a class="indexterm" name="sect_regularexpressions_D3AF958D_3B9F"></a>Regular Expression Syntax</h3></div></div></div><p class="NormalText">This section provides charts of regular expressions for each supported syntax 
      (<a href="ch10s08.htm#Brief">Brief</a>, <a href="ch10s08.htm#Perl">Perl</a>, <a href="ch10s08.htm#SlickEdit">SlickEdit</a>, <a href="ch10s08.htm#UNIX">UNIX</a>, and <a href="ch10s08.htm#Wildcards">Wildcards</a>), including examples. </p><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Note</h3><p class="CellBody"> There are some differences between our implementation of these syntaxes and those elsewhere.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_78581"></a>
        <a name="sect_regularexpressions_13949_1006911"></a>
        <a class="indexterm" name="sect_regularexpressions_A86AFCBB_D272"></a>
        <a class="indexterm" name="sect_regularexpressions_EA270AA4_B700"></a>
        <a name="Brief"></a>Brief Regular Expressions</h4></div></div></div><p class="NormalText">Brief regular expressions are defined in the following table.</p><div class="informaltable"><a name="table_5d8c7988-01a2-4aef-9d7f-d5f40cb5c4bf"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Brief Regular Expression</p>
              </th><th>
                <p class="CellHeading">Definition</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">
                  <span><strong class="command">%</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches beginning of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">&lt;</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches beginning of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">$</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches end of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">&gt;</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches end of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character except newline.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">*</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of zero or more of any character except newline. This is the same as <span><strong class="command">?@</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X+</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of one or more occurrences of X. See <a href="ch10s08.htm#sect_regularexpressions_13949_40014">Minimal versus Maximal Matching</a> for more information.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:*</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of zero or more of any character except newline. This is the same as <span><strong class="command">?\:@</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:@</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of zero or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:+</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of one or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches exactly <span class="emphasis"><em>n1</em></span> occurrences of X. Use <span><strong class="command">{}</strong></span> to avoid ambiguous expressions. For example, <span><strong class="command">a:9{}1</strong></span> searches for nine instances of the letter "a" followed by a "1".</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least zero occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Match exactly <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least zero occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X\:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\(X\)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X but does not define a tagged expression.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">{X}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies a new tagged expression. See <a href="ch10s08.htm#sect_regularexpressions_13949_41450">Using Tagged Expressions</a> for more information.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">{@</strong></span>
                  <span class="emphasis"><em>d</em></span>
                  <span><strong class="command">X}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies to use tagged expression number <span class="emphasis"><em>d</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>d</em></span><span><strong class="command">&lt;=9</strong></span>. No more tagged expressions are defined by the subexpression syntax <span><strong class="command">{X}</strong></span> once this subexpression syntax is used. This is the best way to make sure you have enough tagged expressions.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X|Y</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches X or Y.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">~{X}</strong></span>
                </p>
              </td><td>
                <p class="NormalText"></p>
                <p class="CellBody">Search fails if expression X is matched.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any one of the characters specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges. The expression <span><strong class="command">[A-Z]</strong></span> matches any uppercase letter. Backslash (\) can be used inside the square brackets to define literal characters or define ASCII characters. For example, <span><strong class="command">\-</strong></span> specifies a literal dash character. The expression <span><strong class="command">[\0-\27]</strong></span> matches ASCII character codes <span class="bold"><strong>0..27</strong></span>. The expression <span><strong class="command">[]]</strong></span> matches a right bracket. In SlickEdit® regular expressions, <span><strong class="command">[]</strong></span> matches no characters. In both syntaxes, the expression <span><strong class="command">[\]]</strong></span> matches a right bracket.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[~</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character not specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges. The expression 
	<span><strong class="command">[~A-Z]</strong></span> matches all characters except uppercase letters. The expression <span><strong class="command">[~]</strong></span> matches any character except newline.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> - [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set subtraction. Matches all characters in <span class="emphasis"><em>char-set1</em></span> except the characters in <span class="emphasis"><em>char-set2</em></span>. For example, <span><strong class="command">[a-z-[qw]]</strong></span> matches all English lowercase letters except "q" and "w". 
	<span><strong class="command">[\p{L}-[qw]]</strong></span> matches all Unicode lowercase letters except "q" and "w".</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> &amp; [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set intersection. Matches all characters in <span class="emphasis"><em>char-set1</em></span> that are also in <span class="emphasis"><em>char-set2</em></span>. For example, <span><strong class="command">[\x{0}-\x{7f}&amp;[\p{L}]]</strong></span> matches all letters between 0 and 127.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x{</strong></span>
                  <span class="emphasis"><em>hhhh</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches up to 31-bit Unicode hexadecimal character specified by <span class="emphasis"><em>hhhh</em></span><span><strong class="command">.</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. Where <span class="emphasis"><em>UnicodeCategorySpec</em></span> uses the standard general categories specified by the Unicode consortium. For example, <span><strong class="command">[\p{L}]</strong></span> matches all letters. <span><strong class="command">[\p{Lu}]</strong></span> matches all uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. For example, <span><strong class="command">[\P{L}] </strong></span>matches all characters that are not letters. This is equivalent to <span><strong class="command">[^\p{L}]</strong></span>. <span><strong class="command">[\P{Lu}]</strong></span> matches all characters that are not uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. Where <span class="emphasis"><em>UnicodeIsBlockSpec</em></span> one of the standard character blocks specified by the Unicode consortium. For example, <span><strong class="command">[\p{isGreek}]</strong></span> matches Unicode characters in the Greek block. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. For example, <span><strong class="command">[\P{isGreek}]</strong></span> matches all characters that are not in the Unicode Greek block. This is equivalent to <span><strong class="command">[^\p{isGreek}]</strong></span>. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x</strong></span>
                  <span class="emphasis"><em>hh</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches hexadecimal character <span class="emphasis"><em>hh</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>hh</em></span><span><strong class="command">&lt;=0xff</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\d</strong></span>
                  <span class="emphasis"><em>ddd</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches decimal character <span class="emphasis"><em>ddd</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>ddd</em></span><span><strong class="command">&lt;=255</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>d</em></span>
                </p>
              </td><td>
                <p class="CellBody">Defines a back reference to tagged expression number <span class="emphasis"><em>d</em></span>. For example, <span><strong class="command">{abc}def\0</strong></span> matches the string <span class="bold"><strong>abcdefabc</strong></span>. If the tagged expression has not been set, the search fails.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\c</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Specifies cursor position if match is found. If the expression <span><strong class="command">xyz\c</strong></span> is found, the cursor is placed after <span><strong class="keycap">z</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\n</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches newline character sequence. Useful for matching multi-line search strings. What this matches depends on whether the buffer is a DOS (ASCII 13,10 or just ASCII 10), UNIX (ASCII 10), Macintosh (ASCII 13), or user defined ASCII file. Use <span><strong class="command">\d10</strong></span> if you want to match a 10 character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\r</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches carriage return.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\t</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches tab character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\b</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches at word boundary. For example,<span><strong class="command"> \bre</strong></span> matches all occurrences of "re" that only occur at the beginning of a word. Note that this notation previously matched a backspace character. It can still be used to match a backspace character by using it in a character set (for example,<span class="bold"><strong> [\b]</strong></span>).</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\B</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches all except at word boundary. For example, <span><strong class="command">\Bre</strong></span> matches all occurrences of "re" as long as it is not at the start of a new word.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> and <span><strong class="command">\E</strong></span></p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> matches all characters as literals until <span><strong class="command">\E</strong></span>. This is useful for longer sequences of characters without the need for the escape character. <span><strong class="command">\Q</strong></span> does not require termination with <span><strong class="command">\E</strong></span>, as it will continue to match characters literally until the end of the search string. <span><strong class="command">\E</strong></span> returns to using special character tokens for matching.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\f</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches form feed character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\od </strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any 2-byte DBCS character. This escape is only valid in a match set (<span><strong class="command">[...\od...]</strong></span>).  <span><strong class="command">[~\od]</strong></span> matches any single byte character excluding end-of-line characters. When used to search Unicode text, this escape does nothing.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\om</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns on multi-line matching. This enhances the match character set, or match any character primitives to support matching end-of-line characters. For example, <span><strong class="command">\om?\@</strong></span> matches the rest of the buffer.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\ol</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns off multi-line matching (default). You can still use <span><strong class="command">\n</strong></span> to create regular expressions which match one or more lines. However, expressions like <span><strong class="command">?\@</strong></span> will not match multiple lines. This is much safer and usually faster than using the <span><strong class="command">\om</strong></span> option.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oi</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Ignore case. Turns off case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside the current grouping level, after which case matching is restored to the previous case match setting. See also <span><strong class="command">\oc</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Case-sensitive match. Turns on case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside the current grouping level, after which case matching is restored to the previous case match setting. See also <span><strong class="command">\oi</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Declares character after slash to be literal. For example, <span><strong class="command">\*</strong></span> represents the asterisk (*) character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\:</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches predefined expression corresponding to <span class="emphasis"><em>char</em></span>. The predefined expressions are:</p>
                <p class="CellBody"></p>
                <div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
                      <span><strong class="command">\:a [A-Za-z0-9</strong></span> - Matches an alphanumeric character.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:b\([ \t]#\)</strong></span> - Matches blanks.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:c [A-Za-z] </strong></span>- Matches an alphabetic character.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:d [0-9]</strong></span> - Matches a digit.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:f \([~\[\]\:\\/&lt;&gt;|=+;, \t"']#\)</strong></span> - Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:f \([~/ \t"']#\)</strong></span> - UNIX: Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:h\([0-9A-Fa-f]#\)</strong></span> - Matches a hex number.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:i\([0-9]#\)</strong></span> - Matches an integer.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:n\([0-9]#\(.[0-9]#|\)|.[0-9]#\)\([Ee]\(\+|-|\)[0-9]#|\)\)</strong></span> - Matches a floating number.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:p\(\([A-Za-z]\:|\)\(\\|/|\)\(:f\(\\|/\)\)@:f\)</strong></span> - Windows: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:p\(\(/|\)\(:f\(/\)\)@:f\)</strong></span> - UNIX: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:q\(\"[~\"]@\"|'[~']@'\)</strong></span> - Matches a quoted string.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:v\ ([A-Za-z_$][A-Za-z0-9_$]@\)</strong></span> - Matches a C variable.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:w\ ([A-Za-z]#\)</strong></span> - Matches a word.</p></li></ul></div>
                <div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Warning</h3><p class="CellBody"><span class="bold"><strong>\:f</strong></span> and <span class="bold"><strong>\:p</strong></span></p><p class="NormalText"><span class="bold"><strong>Windows</strong></span> - this regular 
                    expression should not be used to validate an operating system filename. The intent 
                    with this predefined regular expression is to make it useful in practice for handling 
                    filenames output from compilers and filenames in source files. For example, space 
                    characters in filenames are not allowed. </p><p class="NormalText"><span class="bold"><strong>Unix</strong></span> - this regular 
                      expression should not be used to validate an operating system filename. The intent 
                      with this predefined regular expression is to make it useful in practice for 
                      handling filenames output from compilers and filenames in source files. For 
                      example, space, :, &#8220;, and " characters in filenames are not allowed even 
                      though the OS allows them. In the future, we may add &lt; and &gt; to the list of 
                      characters not allowed in a filename.</p></div>
              </td></tr></tbody></table></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_regularexpressions_13949_1007155"></a>
          <a class="indexterm" name="sect_regularexpressions_4259EC48_CB6D"></a>
          <a class="indexterm" name="sect_regularexpressions_5073873E_9F6A"></a>
          <a class="indexterm" name="sect_regularexpressions_27CBCFB0_0D58"></a>Brief Regular Expression Examples</h5></div></div></div><p class="NormalText">The table below shows examples of Brief regular expressions.</p><div class="informaltable"><a name="table_a5400718-677a-458d-9349-ba083e76b449"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">Brief Regular Expression Example</p>
                </th><th>
                  <p class="CellHeading">Description</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">&lt;defproc</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the word <span class="bold"><strong>defproc</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">&lt;definit&gt;</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that only contain the word <span class="bold"><strong>definit</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">&lt;\*name</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the string <span><strong class="command">*name</strong></span>. Notice that the backslash must prefix the special character <span><strong class="command">*</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\t ]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\d9\d32]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\x9\x20]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">p?t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches any three-letter string starting with the letter <span><strong class="keycap">p</strong></span> and ending with the letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>pot</strong></span> and <span class="bold"><strong>pat</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">s*t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the letter <span><strong class="keycap">s</strong></span> followed by any number of characters followed by the nearest letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>seat</strong></span> and <span class="bold"><strong>st</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">{for}|{while}</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the strings <span><strong class="command">for</strong></span> or <span><strong class="command">while</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^\:p</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines beginning with a file name.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">xy+z</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches <span><strong class="keycap">x</strong></span> followed by one or more occurrences of <span><strong class="keycap">y</strong></span> followed by <span><strong class="keycap">z</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\x0d\x0a\x01\x02</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">
                    <a class="indexterm" name="sect_regularexpressions_9CF491B7_5C8A"></a>Matches a sequence of hex binary characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\d13\d10\d1\d2</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches a sequence of decimal binary characters.</p>
                </td></tr></tbody></table></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="Perl"></a>
        <a name="sect_regularexpressions_13949_1007219"></a>
        <a class="indexterm" name="sect_regularexpressions_2CACC2A6_8818"></a>
        <a class="indexterm" name="sect_regularexpressions_EBCF118B_171A"></a>Perl Regular Expressions</h4></div></div></div><p class="NormalText">Perl regular expressions are defined in the following table.</p><div class="informaltable"><a name="table_e7cfe196-7218-4e78-b094-80c733ee3a67"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Perl Regular Expression</p>
              </th><th>
                <p class="CellHeading">Definition</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">
                  <span><strong class="command">^</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches beginning of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">$</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches end of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">.</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character except newline.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X+</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of one or more occurrences of X. See <a href="ch10s08.htm#sect_regularexpressions_13949_40014">Minimal versus Maximal Matching</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X*</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of zero or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of zero or one occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Match exactly <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least zero occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X+?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of one or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X*?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of zero or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X??</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of zero or one occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches exactly <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least zero occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?!X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Search fails if expression X is matched. The expression <span><strong class="command">^(?!if)</strong></span> matches the beginning of all lines that do not start with <span class="bold"><strong>if</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?=X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Assert, positive lookahead. Searches for subexpression X, but X is not returned as part of the match. For example, to match words ending in "ed" while excluding "ed" as part of the match, use <span><strong class="command">\b[a-z]+(?=ed\b)</strong></span>. See also <span><strong class="command">(?!X)</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?&gt;X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Prohibit backtracking. This expression is advanced usage. It can be used to prevent the subexpression X from backtracking when using maximal (greedy) matching.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?#text)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Comment. No text is matched in this expression; it is used for comment and documentation only.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies a new tagged expression (see <a href="ch10s08.htm#sect_regularexpressions_13949_41450">Using Tagged Expressions</a>). No more tagged expressions are defined once an explicit tagged expression number is specified as shown below.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?</strong></span>
                  <span class="emphasis"><em>d</em></span>
                  <span><strong class="command">X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies to use tagged expression number <span class="emphasis"><em>d</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>d</em></span><span><strong class="command">&lt;=9</strong></span>. No more tagged expressions are defined by the subexpression syntax <span><strong class="command">(X)</strong></span> once this subexpression syntax is used. This is the best way to make sure you have enough tagged expressions.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?:X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X but does not define a tagged expression.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X|Y</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches X or Y.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any one of the characters specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges. The expression <span><strong class="command">[A-Z]</strong></span> matches any uppercase letter. A backslash (\) may be used inside the square brackets to define literal characters or define ASCII characters. For example, <span><strong class="command">\-</strong></span> specifies a literal dash character. The expression <span><strong class="command">[\d0-\d27]</strong></span> matches ASCII character codes <span><strong class="command">0..27</strong></span>. The expression <span><strong class="command">[]]</strong></span> matches a right bracket. In SlickEdit® regular expressions, <span><strong class="command">[]</strong></span> matches no characters. In both syntaxes, the expression <span><strong class="command">[\]]</strong></span> matches a right bracket. The expression <span><strong class="command">[^] </strong></span>matches a caret (^) character but this does not work for SlickEdit regular expressions. In both syntaxes, <span><strong class="command">[\^]</strong></span> matches a caret (^) character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[^</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character not specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> - [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set subtraction. Matches all characters in <span class="emphasis"><em>char-set1</em></span> except the characters in <span class="emphasis"><em>char-set2</em></span>. The expression <span><strong class="command">[^A-Z]</strong></span> matches all characters except uppercase letters. For example, <span><strong class="command">[a-z-[qw]] </strong></span>matches all English lowercase letters except <span><strong class="keycap">q</strong></span> and <span><strong class="keycap">w</strong></span>. <span><strong class="command">[\p{L}-[qw]]</strong></span> matches all Unicode lowercase letters except <span><strong class="keycap">q</strong></span> and <span><strong class="keycap">w</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> &amp; [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set intersection. Matches all characters in <span class="emphasis"><em>char-set1</em></span> that are also in <span class="emphasis"><em>char-set2</em></span>. For example, <span><strong class="command">[\x{0}-\x{7f}&amp;[\p{L}]]</strong></span> matches all letters between 0 and 127.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x{</strong></span>
                  <span class="emphasis"><em>hhhh</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches up to 31-bit Unicode hexadecimal character specified by <span class="emphasis"><em>hhhh</em></span><span><strong class="command">.</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. Where <span class="emphasis"><em>UnicodeCategorySpec</em></span> uses the standard general categories specified by the Unicode consortium. For example, <span><strong class="command">[\p{L}]</strong></span> matches all letters. <span><strong class="command">[\p{Lu}]</strong></span> matches all uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. For example, <span><strong class="command">[\P{L}]</strong></span> matches all characters that are not letters. This is equivalent to <span><strong class="command">[^\p{L}]</strong></span>. <span><strong class="command">[\P{Lu}]</strong></span> matches all characters that are not uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. Where <span class="emphasis"><em>UnicodeIsBlockSpec</em></span> one of the standard character blocks specified by the Unicode consortium. For example, <span><strong class="command">[\p{isGreek}]</strong></span> matches Unicode characters in the Greek block. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. For example, <span><strong class="command">[\P{isGreek}]</strong></span> matches all characters that are not in the Unicode Greek block. This is equivalent to <span><strong class="command">[^\p{isGreek}]</strong></span>. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x</strong></span>
                  <span class="emphasis"><em>hh</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches hexadecimal character <span class="emphasis"><em>hh</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>hh</em></span><span><strong class="command">&lt;=0xff</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\#ddd</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches decimal character where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>ddd</em></span><span><strong class="command">&lt;=255</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>d</em></span>
                </p>
              </td><td>
                <p class="CellBody">Defines a back reference to tagged expression number <span class="emphasis"><em>d</em></span>. For example, <span><strong class="command">(abc)def\1</strong></span> matches the string <span><strong class="command">abcdefabc</strong></span>. If the tagged expression has not been set, the search fails.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\d</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Equivalent to <span><strong class="command">[0-9]</strong></span>. Can also be used inside a character class. For example, <span><strong class="command">[A-F\d]</strong></span> is equivalent to <span><strong class="command">[A-F0-9]</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\D</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Equivalent to <span><strong class="command">[^0-9]</strong></span>. Can also be used inside a character class.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\w</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Equivalent to <span><strong class="command">[a-zA-Z0-9_]</strong></span>. Can also be used inside a character class.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\W</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Equivalent to <span><strong class="command">[^a-zA-Z0-9_]</strong></span>. Can also be used inside a character class.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\s</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Equivalent to <span><strong class="command">[ \t\n\r\f]</strong></span>. Can also be used inside a character class.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\S</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Equivalent to <span><strong class="command">[^ \t\n\r\f]</strong></span>. Can also be used inside a character class.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\ooo</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Octal ASCII value.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\cx</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Control character (ASCII values 0-31) <span><strong class="command">'@' &lt;=x&lt;='_'</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\z</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Specifies cursor position if match is found. If the expression <span><strong class="command">abc\z</strong></span> is found, the cursor is placed after the <span><strong class="command">c</strong></span>. Note that in UNIX, this is the same as <span><strong class="command">\c</strong></span>. However in Perl, <span><strong class="command">\c</strong></span> is used only for control characters.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\n</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches newline character sequence. Useful for matching multi-line search strings. What this matches depends on whether the buffer is a DOS (ASCII 13,10 or just ASCII 10), UNIX (ASCII 10), Macintosh (ASCII 13), or user-defined ASCII file. Use <span><strong class="command">\d10</strong></span> if you want to match an ASCII 10 character. </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\r</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches carriage return (ASCII 13). What this matches depends on whether the buffer is a DOS (ASCII 13,10 or just ASCII 10), UNIX (ASCII 10), Macintosh (ASCII 13), or user defined ASCII file.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\t</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches tab character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\b</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches at word boundary. For example,<span><strong class="command"> \bre</strong></span> matches all occurrences of "re" that only occur at the beginning of a word.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\B</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches all except at word boundary. For example, <span><strong class="command">\Bre</strong></span> matches all occurrences of "re" as long as it is not at the start of a new word.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> and <span><strong class="command">\E</strong></span></p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> matches all characters as literals until <span><strong class="command">\E</strong></span>. This is useful for longer sequences of characters without the need for the escape character. <span><strong class="command">\Q</strong></span> does not require termination with <span><strong class="command">\E</strong></span>, as it will continue to match characters literally until the end of the search string. <span><strong class="command">\E</strong></span> returns to using special character tokens for matching.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\f</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches form feed character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\od</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any 2-byte DBCS character. This escape is only valid in a match set (<span><strong class="command">[...\od...]</strong></span>).  <span><strong class="command">[^\od]</strong></span> matches any single byte character excluding end-of-line characters. When used to search Unicode text, this escape does nothing. </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\om</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns on multi-line matching. This enhances the match character set, or match any character primitives to support matching end-of-line characters. For example, <span><strong class="command">\om.+</strong></span> matches the rest of the buffer. </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\ol</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns off multi-line matching (default). You can still use <span><strong class="command">\n</strong></span> to create regular expressions which match one or more lines. However, expressions like <span><strong class="command">.+</strong></span> will not match multiple lines. This is much safer and usually faster than using the <span><strong class="command">\om</strong></span> option.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oi</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Ignore case. Turns off case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside the current grouping level, after which case matching is restored to the previous case match setting. Note that this is the equivalent to the Perl syntax <span><strong class="command">?i</strong></span>. See also <span><strong class="command">\oc</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Case-sensitive match. Turns on case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside the current grouping level, after which case matching is restored to the previous case match setting. Note that this is equivalent to the Perl syntax <span><strong class="command">?-i</strong></span>. See also <span><strong class="command">\oi</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Declares character after slash to be literal. For example, <span><strong class="command">\*</strong></span> represents the star character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\:</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches predefined expression corresponding to <span class="emphasis"><em>char</em></span>. The pre-defined expressions are:</p>
                <p class="CellBody"></p>
                <div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
                      <span><strong class="command">\:a [A-Za-z0-9]</strong></span> - Matches an alphanumeric character.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:c [A-Za-z]</strong></span> - Matches an alphabetic character.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:b (?:[ \t]+)</strong></span> - Matches blanks.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:d [0-9]</strong></span> - Matches a digit.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:f (?:[^\[\]\:\\/&lt;&gt;|=+;, \t"']+)</strong></span> - Windows: Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:f (?:[^/ \t"']+)</strong></span> - UNIX: Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:h (?:[0-9A-Fa-f]+)</strong></span> - Matches a hex number.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:i (?:[0-9]+)</strong></span> - Matches an integer.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:n (?:(?:[0-9]+(?:\.[0-9]+|)|\.[0-9]+)(?:[Ee](?:\+|-|)[0-9]+|))</strong></span> - Matches a floating number.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:p (?:(?:[A-Za-z]:|)(?:\\|/|)(?:\:f(?:\\|/))*\:f)</strong></span> - Windows: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:p (?:(?:/|)?:(?::f(/))*\:f)</strong></span> - UNIX: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:q (?:\"[^\"]*\"|'[^']*')</strong></span> - Matches a quoted string.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:v (?:[A-Za-z_$][A-Za-z0-9_$]*)</strong></span> - Matches a C variable.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:w (?:[A-Za-z]+)</strong></span> - Matches a word.</p></li></ul></div>
                <div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Warning</h3><p class="CellBody"><span class="bold"><strong>\:f</strong></span> and <span class="bold"><strong>\:p</strong></span></p><p class="NormalText"><span class="bold"><strong>Windows</strong></span> - this regular 
                    expression should not be used to validate an operating system filename. The intent 
                    with this predefined regular expression is to make it useful in practice for handling 
                    filenames output from compilers and filenames in source files. For example, space 
                    characters in filenames are not allowed. </p><p class="NormalText"><span class="bold"><strong>Unix</strong></span> - this regular 
                      expression should not be used to validate an operating system filename. The intent 
                      with this predefined regular expression is to make it useful in practice for 
                      handling filenames output from compilers and filenames in source files. For 
                      example, space, :, &#8220;, and " characters in filenames are not allowed even 
                      though the OS allows them. In the future, we may add &lt; and &gt; to the list of 
                      characters not allowed in a filename.</p></div>
              </td></tr></tbody></table></div><p class="NormalText">The precedence of operators, from highest to lowest, is as follows:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span><strong class="command">+</strong></span>, <span><strong class="command">*</strong></span>, <span><strong class="command">?</strong></span>, <span><strong class="command">{}</strong></span>, <span><strong class="command">+?</strong></span>, <span><strong class="command">*?</strong></span>, <span><strong class="command">??</strong></span>, <span><strong class="command">{}?</strong></span> (These operators have the same precedence.)</p></li><li><p class="NormalText">concatenation</p></li><li><p class="NormalText">
            <span><strong class="command">|</strong></span>
          </p></li></ul></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_regularexpressions_13949_1007506"></a>
          <a class="indexterm" name="sect_regularexpressions_E550D1B4_7585"></a>
          <a class="indexterm" name="sect_regularexpressions_AB9ED19F_9EE8"></a>
          <a class="indexterm" name="sect_regularexpressions_C43ADE37_9875"></a>Perl Regular Expression Examples</h5></div></div></div><p class="NormalText">The table below shows examples of Perl regular expressions.</p><div class="informaltable"><a name="table_407e5993-a271-450a-9976-2c43aa73f15c"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">Perl Regular Expression Example</p>
                </th><th>
                  <p class="CellHeading">Description</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^defproc</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the word <span class="bold"><strong>defproc</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^definit$</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that only contain the word <span class="bold"><strong>definit</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^\*name</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the string <span class="bold"><strong>*name</strong></span>. Notice that the backslash must prefix the special character <span class="bold"><strong>*</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\t ]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\d9\d32]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\x9\x20]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">p.t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches any three-letter string starting with the letter <span><strong class="keycap">p</strong></span> and ending with the letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>pot</strong></span> and <span class="bold"><strong>pat</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">s.*?t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the letter <span><strong class="keycap">s</strong></span> followed by any number of characters followed by the nearest letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>seat</strong></span> and <span class="bold"><strong>st</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">for|while</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the strings <span><strong class="command">for</strong></span> or <span><strong class="command">while</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^\:p</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines beginning with a file name.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">xy+z</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches <span class="bold"><strong>x</strong></span> followed by one or more occurrences of <span class="bold"><strong>y</strong></span> followed by <span class="bold"><strong>z</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[a-z-[qw]]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Character set subtraction. Matches all English lowercase letters except <span class="bold"><strong>q</strong></span> and <span class="bold"><strong>w</strong></span>. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\p{isGreek}&amp;[\p{L}]]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Character set intersection. Matches all Unicode letters in the Greek block. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\x{6587}</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches Unicode character with hexadecimal value <span class="bold"><strong>6587</strong></span>. Character set intersection. Matches all Unicode letters in the Greek block. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command"> [\p{L}-[qw]]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode letters except <span class="bold"><strong>q</strong></span> and <span class="bold"><strong>w</strong></span>. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command"> [\p{L}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode letters. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\p{Lul}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode uppercase and lowercase letters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\P{L}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode characters that are not letters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\p{isGreek}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode characters in the Greek block. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\x0d\x0a\x01\x02</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches a sequence of hex binary characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\d13\d10\d1\d2</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches a sequence of decimal binary characters.</p>
                </td></tr></tbody></table></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_43274"></a>
        <a name="sect_regularexpressions_13949_1007601"></a>
        <a class="indexterm" name="sect_regularexpressions_277A50E6_B628"></a>
        <a class="indexterm" name="sect_regularexpressions_12D63A8D_B329"></a>
        <a name="SlickEdit"></a>
        SlickEdit Regular Expressions</h4></div></div></div><p class="NormalText">SlickEdit regular expressions are defined in the following table.</p><div class="informaltable"><a name="table_bd29c37f-5422-474c-9343-11483f67e49c"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">SlickEdit Regular Expression</p>
              </th><th>
                <p class="CellHeading">Definition</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">
                  <span><strong class="command">^</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches beginning of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">$</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches end of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character except newline.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X+</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of one or more occurrences of X. See <a href="ch10s08.htm#sect_regularexpressions_13949_40014">Minimal versus Maximal Matching</a> for more information.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X#</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of one or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X*</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of zero or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X@</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of zero or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches exactly <span class="emphasis"><em>n1</em></span> occurrences of X. Use <span><strong class="command">()</strong></span> to avoid ambiguous expressions. For example <span><strong class="command">a:9()1</strong></span> searches for nine instance of the letter <span class="bold"><strong>a</strong></span> followed by a <span class="bold"><strong>1</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X:</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X:*</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X:*</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">~X</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Search fails if expression X is matched. The expression <span><strong class="command">^~(if)</strong></span> matches the beginning of all lines that do not start with <span><strong class="command">if</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">{X}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies a new tagged expression. See <a href="ch10s08.htm#sect_regularexpressions_13949_41450">Using Tagged Expressions</a> for more information.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">{#</strong></span>
                  <span class="emphasis"><em>d</em></span>
                  <span><strong class="command">X}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies to use tagged expression number <span class="emphasis"><em>d</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>d</em></span><span><strong class="command">&lt;=9</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X|Y</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches X or Y.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any one of the characters specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges. The expression <span><strong class="command">[A-Z]</strong></span> matches any uppercase letter. Backslash (\) may be used inside the square brackets to define literal characters or define ASCII characters. For example, <span><strong class="command">\-</strong></span> specifies a literal dash character. The expression <span><strong class="command">[\0-\27]</strong></span> matches ASCII character codes <span class="bold"><strong>0..27</strong></span>. The expression <span><strong class="command">[]</strong></span> matches no characters. In UNIX regular expressions, <span><strong class="command">[]]</strong></span> matches a right bracket. In both syntaxes, the expression <span><strong class="command">[\]]</strong></span> matches a right bracket. The expression <span><strong class="command">[\^]</strong></span> matches a caret (^) character in both syntaxes.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[~</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character not specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges. The expression 
	<span><strong class="command">[~A-Z]</strong></span> matches all characters except uppercase letters.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[^</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Same as <span><strong class="command">[~</strong></span><span class="emphasis"><em>char-set</em></span><span><strong class="command">]</strong></span> above.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> - [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set subtraction. Matches all characters in <span class="emphasis"><em>char-set1</em></span> except the characters in <span class="emphasis"><em>char-set2</em></span>. For example, <span><strong class="command">[a-z-[qw]]</strong></span> matches all English lowercase letters except <span><strong class="keycap">q</strong></span> and <span><strong class="keycap">w</strong></span>. 
	<span><strong class="command">[\p{L}-[qw]]</strong></span> matches all Unicode lowercase letters except <span><strong class="keycap">q</strong></span> and <span><strong class="keycap">w</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> &amp; [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set intersection. Matches all characters in <span class="emphasis"><em>char-set1</em></span> that are also in <span class="emphasis"><em>char-set2</em></span>. For example, <span><strong class="command">[\x{0}-\x{7f}&amp;[\p{L}]]</strong></span> matches all letters between 0 and 127.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x{</strong></span>
                  <span class="emphasis"><em>hhhh</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches up to 31-bit Unicode hexadecimal character specified by <span class="emphasis"><em>hhhh</em></span><span><strong class="command">.</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. Where <span class="emphasis"><em>UnicodeCategorySpec</em></span> uses the standard general categories specified by the Unicode consortium. For example, <span><strong class="command">[\p{L}]</strong></span> matches all letters. <span><strong class="command">[\p{Lu}]</strong></span> matches all uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. For example, <span><strong class="command">[\P{L}]</strong></span> matches all characters that are not letters. This is equivalent to <span><strong class="command">[^\p{L}]</strong></span>. <span><strong class="command">[\P{Lu}]</strong></span> matches all characters that are not uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. Where <span class="emphasis"><em>UnicodeIsBlockSpec</em></span> one of the standard character blocks specified by the Unicode consortium. For example, <span><strong class="command">[\p{isGreek}]</strong></span> matches Unicode characters in the Greek block. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. For example, <span><strong class="command">[\P{isGreek}]</strong></span> matches all characters that are not in the Unicode Greek block. This is equivalent to <span><strong class="command">[^\p{isGreek}]</strong></span>. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x</strong></span>
                  <span class="emphasis"><em>hh</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches hexadecimal character <span class="emphasis"><em>hh</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>hh</em></span><span><strong class="command">&lt;=0xff</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>ddd</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches decimal character <span class="emphasis"><em>ddd</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>ddd</em></span><span><strong class="command">&lt;=255</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\g</strong></span>
                  <span class="emphasis"><em>d</em></span>
                </p>
              </td><td>
                <p class="CellBody">Defines a back reference to tagged expression number <span class="emphasis"><em>d</em></span>. For example, <span><strong class="command">{abc}def\g0</strong></span> matches the string <span class="bold"><strong>abcdefabc</strong></span>. If the tagged expression has not been set, the search fails.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\c</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Specifies cursor position if match is found. If the expression <span><strong class="command">xyz\c</strong></span> is found, the cursor is placed after the <span class="bold"><strong>z</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\n</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches newline character sequence. Useful for matching multi-line search strings. What this matches depends on whether the buffer is a DOS (ASCII 13,10 or just ASCII 10), UNIX (ASCII 10), Macintosh (ASCII 13), or user-defined ASCII file. Use <span><strong class="command">\d10</strong></span> if you want to match an ASCII 10 character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\r</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches carriage return.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\t</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches tab character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\b</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches at word boundary. For example,<span><strong class="command"> \bre</strong></span> matches all occurrences of "re" that only occur at the beginning of a word. Note that this notation previously matched a backspace character. It can still be used to match a backspace character by using it in a character set (for example,<span class="bold"><strong> [\b]</strong></span>).</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\B</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches all except at word boundary. For example, <span><strong class="command">\Bre</strong></span> matches all occurrences of "re" as long as it is not at the start of a new word.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> and <span><strong class="command">\E</strong></span></p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> matches all characters as literals until <span><strong class="command">\E</strong></span>. This is useful for longer sequences of characters without the need for the escape character. <span><strong class="command">\Q</strong></span> does not require termination with <span><strong class="command">\E</strong></span>, as it will continue to match characters literally until the end of the search string. <span><strong class="command">\E</strong></span> returns to using special character tokens for matching.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\f</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches form feed character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\od</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any 2-byte DBCS character. This escape is only valid in a match set (<span><strong class="command">[...\od...]</strong></span>).  <span><strong class="command">[^\od]</strong></span> matches any single byte character excluding end-of-line characters. When used to search Unicode text, this escape does nothing.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\om</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns on multi-line matching. This enhances the match character set, or match any character primitives to support matching end-of-line characters. For example, <span><strong class="command">\om?#</strong></span> matches the rest of the buffer. <span class="bold"><strong>NOTE</strong></span>: Test the regular expression on a very small file before using it on a large file. This option may cause the editor to use a lot of memory. </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\ol</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns off multi-line matching (default). You can still use <span><strong class="command">\n</strong></span> to create regular expressions which match one or more lines. However, expressions like <span><strong class="command">?#</strong></span> will not match multiple lines. This is much safer and usually faster than using the <span><strong class="command">\om</strong></span> option.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oi</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Ignore case. Turns off case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside all <span><strong class="keycap">( ) </strong></span>and <span><strong class="keycap">{ }</strong></span> groups, after which case matching is restored to the previous case match setting. See also <span><strong class="command">\oc</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Case-sensitive match. Turns on case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside all <span><strong class="keycap">( ) </strong></span>and <span><strong class="keycap">{ }</strong></span> groups, after which case matching is restored to the previous case match setting. See also <span><strong class="command">\oi</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Declares character after slash to be literal. For example, <span><strong class="command">\:</strong></span> represents the colon character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">:</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches predefined expression corresponding to <span class="emphasis"><em>char</em></span>. The predefined expressions are:</p>
                <p class="CellBody"></p>
                <div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
                      <span><strong class="command">:a [A-Za-z0-9]</strong></span> - Matches an alphanumeric character.</p></li><li><p class="NormalText">
                      <span><strong class="command">:b ([ \t]#\)</strong></span> - Matches blanks - note that <span><strong class="command">:b</strong></span> is not like the Perl/.NET <span><strong class="command">\s</strong></span>.</p></li><li><p class="NormalText">
                      <span><strong class="command">:c [A-Za-z]</strong></span> - Matches an alphabetic character.</p></li><li><p class="NormalText">
                      <span><strong class="command">:d [0-9]</strong></span> - Matches a digit.</p></li><li><p class="NormalText">
                      <span><strong class="command">:f ([~\[\]\:\\/&lt;&gt;|=+;, \t"']#)</strong></span> - Windows: Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">:f ([~/ \t"']#)</strong></span> - UNIX: Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">:h ([0-9A-Fa-f]#)</strong></span> - Matches a hex number.</p></li><li><p class="NormalText">
                      <span><strong class="command">:i ([0-9]#)</strong></span> - Matches an integer.</p></li><li><p class="NormalText">
                      <span><strong class="command">:n (([0-9]#(.[0-9]#|)|.[0-9]#)([Ee](\+|-|)[0-9]#|))</strong></span> - Matches a floating number.</p></li><li><p class="NormalText">
                      <span><strong class="command">:p (([A-Za-z]\:|)(\\|/|)(:f(\\|/))@:f)</strong></span> - Windows: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">:p ((/|)(:f(/))@:f)</strong></span> - UNIX: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">:q (\"[~\"]@\"|'[~']@') </strong></span>- Matches a quoted string.</p></li><li><p class="NormalText">
                      <span><strong class="command">:v ([A-Za-z_$][A-Za-z0-9_$]@)</strong></span> - Matches a C variable.</p></li><li><p class="NormalText">
                      <span><strong class="command">:w ([A-Za-z]#)</strong></span> - Matches a word.</p></li></ul></div>
                <div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Warning</h3><p class="CellBody"><span class="bold"><strong>:f</strong></span> and <span class="bold"><strong>:p</strong></span></p><p class="NormalText"><span class="bold"><strong>Windows</strong></span> - this regular 
                    expression should not be used to validate an operating system filename. The intent 
                    with this predefined regular expression is to make it useful in practice for handling 
                    filenames output from compilers and filenames in source files. For example, space 
                    characters in filenames are not allowed. </p><p class="NormalText"><span class="bold"><strong>Unix</strong></span> - this regular 
                      expression should not be used to validate an operating system filename. The intent 
                      with this predefined regular expression is to make it useful in practice for 
                      handling filenames output from compilers and filenames in source files. For 
                      example, space, :, &#8220;, and " characters in filenames are not allowed even 
                      though the OS allows them. In the future, we may add &lt; and &gt; to the list of 
                      characters not allowed in a filename.</p></div>
              </td></tr></tbody></table></div><p class="NormalText">The precedence of operators, from highest to lowest, is as follows:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span><strong class="command">+</strong></span>, <span><strong class="command">#</strong></span>, <span><strong class="command">*</strong></span>, <span><strong class="command">@</strong></span>, <span><strong class="command">:</strong></span>, <span><strong class="command">:*</strong></span> (These operators have the same precedence.)</p></li><li><p class="NormalText">concatenation</p></li><li><p class="NormalText">
            <span><strong class="command">|</strong></span>
          </p></li></ul></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_regularexpressions_13949_1007828"></a>
          <a class="indexterm" name="sect_regularexpressions_7DB80315_59FC"></a>
          <a class="indexterm" name="sect_regularexpressions_5F38199E_52EB"></a>
          <a class="indexterm" name="sect_regularexpressions_1E3AF008_FE01"></a>
          SlickEdit Regular Expression Examples</h5></div></div></div><p class="NormalText">The table below shows examples of SlickEdit regular expressions.</p><div class="informaltable"><a name="table_50180c72-1f6d-43d4-b483-2eb72fbdf743"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">SlickEdit Regular Expression Example</p>
                </th><th>
                  <p class="CellHeading">Description</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^defproc</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the word <span class="bold"><strong>defproc</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^definit$</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that only contain the word <span class="bold"><strong>definit</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^\:name</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the string <span><strong class="command">:name</strong></span>. Notice that the backslash must prefix the colon character (:).</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\t ]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\9\32]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\x9\x20]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">p?t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches any three-letter string starting with the letter <span><strong class="keycap">p</strong></span> and ending with the letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>pot</strong></span> and <span class="bold"><strong>pat</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">s?*t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the letter <span><strong class="keycap">s</strong></span> followed by any number of characters followed by the nearest letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>seat</strong></span> and <span class="bold"><strong>st</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">for|while</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the strings <span><strong class="command">for</strong></span> or <span><strong class="command">while</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^:p</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines beginning with a file name.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">xy+z</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches <span><strong class="keycap">x</strong></span> followed by one or more occurrences of <span><strong class="keycap">y</strong></span> followed by <span><strong class="keycap">z</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\x0d\x0a\x01\x02</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches a sequence of hex binary characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\13\10\1\2</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches a sequence of decimal binary characters.</p>
                </td></tr></tbody></table></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="UNIX"></a>
        <a name="sect_regularexpressions_13949_1007891"></a>
        <a class="indexterm" name="sect_regularexpressions_2298C905_E40D"></a>
        <a class="indexterm" name="sect_regularexpressions_6C030629_5BF3"></a>UNIX Regular Expressions</h4></div></div></div><p class="NormalText">UNIX regular expressions are defined in the following table.</p><div class="informaltable"><a name="table_c06d3436-b126-46d0-b2f2-91c0b9935910"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">UNIX Regular Expression</p>
              </th><th>
                <p class="CellHeading">Definition</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">
                  <span><strong class="command">^</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches beginning of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">$</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches end of line.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">.</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character except newline.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X+</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of one or more occurrences of X. See <a href="ch10s08.htm#sect_regularexpressions_13949_40014">Minimal versus Maximal Matching</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X*</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of zero or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of zero or one occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Match exactly <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least zero occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Maximal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X+?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of one or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X*?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of zero or more occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X??</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of zero or one occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches exactly <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least zero occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X{</strong></span>
                  <span class="emphasis"><em>n1</em></span>
                  <span><strong class="command">,</strong></span>
                  <span class="emphasis"><em>n2</em></span>
                  <span><strong class="command">}?</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Minimal match of at least <span class="emphasis"><em>n1</em></span> occurrences but not more than <span class="emphasis"><em>n2</em></span> occurrences of X.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?!X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Search fails if expression X is matched. The expression <span><strong class="command">^(?!if)</strong></span> matches the beginning of all lines that do not start with <span class="bold"><strong>if</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?=X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Assert, positive lookahead. Searches for subexpression X, but X is not returned as part of the match. For example, to match words ending in "ed" while excluding "ed" as part of the match, use <span><strong class="command">\b[a-z]+(?=ed\b)</strong></span>. See also <span><strong class="command">(?!X)</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?&gt;X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Prohibit backtracking. This expression is advanced usage. It can be used to prevent the subexpression X from backtracking when using maximal (greedy) matching.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?#text)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Comment. No text is matched in this expression; it is used for comment and documentation only.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies a new tagged expression (see <a href="ch10s08.htm#sect_regularexpressions_13949_41450">Using Tagged Expressions</a>). No more tagged expressions are defined once an explicit tagged expression number is specified as shown below.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?</strong></span>
                  <span class="emphasis"><em>d</em></span>
                  <span><strong class="command">X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X and specifies to use tagged expression number <span class="emphasis"><em>d</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>d</em></span><span><strong class="command">&lt;=9</strong></span>. No more tagged expressions are defined by the subexpression syntax <span><strong class="command">(X)</strong></span> once this subexpression syntax is used. This is the best way to make sure you have enough tagged expressions.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">(?:X)</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches subexpression X but does not define a tagged expression.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">X|Y</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches X or Y.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any one of the characters specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges. The expression <span><strong class="command">[A-Z]</strong></span> matches any uppercase letter. A backslash (\) may be used inside the square brackets to define literal characters or define ASCII characters. For example, <span><strong class="command">\-</strong></span> specifies a literal dash character. The expression <span><strong class="command">[\d0-\d27]</strong></span> matches ASCII character codes <span><strong class="command">0..27</strong></span>. The expression <span><strong class="command">[]]</strong></span> matches a right bracket. In SlickEdit® regular expressions, <span><strong class="command">[]</strong></span> matches no characters. In both syntaxes, the expression <span><strong class="command">[\]]</strong></span> matches a right bracket. The expression <span><strong class="command">[^] </strong></span>matches a caret (^) character but this does not work for SlickEdit regular expressions. In both syntaxes, <span><strong class="command">[\^]</strong></span> matches a caret (^) character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[^</strong></span>
                  <span class="emphasis"><em>char-set</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any character not specified by <span class="emphasis"><em>char-set</em></span>. A dash (-) character may be used to specify ranges.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> - [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set subtraction. Matches all characters in <span class="emphasis"><em>char-set1</em></span> except the characters in <span class="emphasis"><em>char-set2</em></span>. The expression <span><strong class="command">[^A-Z]</strong></span> matches all characters except uppercase letters. For example, <span><strong class="command">[a-z-[qw]] </strong></span>matches all English lowercase letters except <span><strong class="keycap">q</strong></span> and <span><strong class="keycap">w</strong></span>. <span><strong class="command">[\p{L}-[qw]]</strong></span> matches all Unicode lowercase letters except <span><strong class="keycap">q</strong></span> and <span><strong class="keycap">w</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">[</strong></span>
                  <span class="emphasis"><em>char-set1</em></span>
                  <span><strong class="command"> &amp; [</strong></span>
                  <span class="emphasis"><em>char-set2</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Character set intersection. Matches all characters in <span class="emphasis"><em>char-set1</em></span> that are also in <span class="emphasis"><em>char-set2</em></span>. For example, <span><strong class="command">[\x{0}-\x{7f}&amp;[\p{L}]]</strong></span> matches all letters between 0 and 127.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x{</strong></span>
                  <span class="emphasis"><em>hhhh</em></span>
                  <span><strong class="command">}</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches up to 31-bit Unicode hexadecimal character specified by <span class="emphasis"><em>hhhh</em></span><span><strong class="command">.</strong></span></p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. Where <span class="emphasis"><em>UnicodeCategorySpec</em></span> uses the standard general categories specified by the Unicode consortium. For example, <span><strong class="command">[\p{L}]</strong></span> matches all letters. <span><strong class="command">[\p{Lu}]</strong></span> matches all uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeCategorySpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeCategorySpec</em></span>. For example, <span><strong class="command">[\P{L}]</strong></span> matches all characters that are not letters. This is equivalent to <span><strong class="command">[^\p{L}]</strong></span>. <span><strong class="command">[\P{Lu}]</strong></span> matches all characters that are not uppercase letters. See <a href="ch10s08.htm#sect_regularexpressions_13949_62848">Unicode Category Specifications for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\p{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. Where <span class="emphasis"><em>UnicodeIsBlockSpec</em></span> one of the standard character blocks specified by the Unicode consortium. For example, <span><strong class="command">[\p{isGreek}]</strong></span> matches Unicode characters in the Greek block. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\P{</strong></span>
                  <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>
                  <span><strong class="command">]</strong></span>
                </p>
              </td><td>
                <p class="CellBody">(Only valid in character set) Matches characters not in <span class="emphasis"><em>UnicodeIsBlockSpec</em></span>. For example, <span><strong class="command">[\P{isGreek}]</strong></span> matches all characters that are not in the Unicode Greek block. This is equivalent to <span><strong class="command">[^\p{isGreek}]</strong></span>. See <a href="ch10s08.htm#sect_regularexpressions_13949_76576">Unicode Character Blocks for Regular Expressions</a>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\x</strong></span>
                  <span class="emphasis"><em>hh</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches hexadecimal character <span class="emphasis"><em>hh</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>hh</em></span><span><strong class="command">&lt;=0xff</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\d</strong></span>
                  <span class="emphasis"><em>ddd</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches decimal character <span class="emphasis"><em>ddd</em></span> where <span><strong class="command">0&lt;=</strong></span><span class="emphasis"><em>ddd</em></span><span><strong class="command">&lt;=255</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>d</em></span>
                </p>
              </td><td>
                <p class="CellBody">Defines a back reference to tagged expression number <span class="emphasis"><em>d</em></span>. For example, <span><strong class="command">(abc)def\1</strong></span> matches the string <span><strong class="command">abcdefabc</strong></span>. If the tagged expression has not been set, the search fails.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\c</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Specifies cursor position if match is found. If the expression <span><strong class="command">xyz\c</strong></span> is found the cursor is placed after the <span><strong class="command">z</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\n</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches newline character sequence. Useful for matching multi-line search strings. What this matches depends on whether the buffer is a DOS (ASCII 13,10 or just ASCII 10), UNIX (ASCII 10), Macintosh (ASCII 13), or user-defined ASCII file. Use <span><strong class="command">\d10</strong></span> if you want to match an ASCII 10 character. </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\r</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches carriage return (ASCII 13). What this matches depends on whether the buffer is a DOS (ASCII 13,10 or just ASCII 10), UNIX (ASCII 10), Macintosh (ASCII 13), or user defined ASCII file.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\t</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches tab character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\b</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches at word boundary. For example,<span><strong class="command"> \bre</strong></span> matches all occurrences of "re" that only occur at the beginning of a word.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\B</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches all except at word boundary. For example, <span><strong class="command">\Bre</strong></span> matches all occurrences of "re" as long as it is not at the start of a new word.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> and <span><strong class="command">\E</strong></span></p>
              </td><td>
                <p class="CellBody">
                  <span><strong class="command">\Q</strong></span> matches all characters as literals until <span><strong class="command">\E</strong></span>. This is useful for longer sequences of characters without the need for the escape character. <span><strong class="command">\Q</strong></span> does not require termination with <span><strong class="command">\E</strong></span>, as it will continue to match characters literally until the end of the search string. <span><strong class="command">\E</strong></span> returns to using special character tokens for matching.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\f</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches form feed character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\od</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Matches any 2-byte DBCS character. This escape is only valid in a match set (<span><strong class="command">[...\od...]</strong></span>).  <span><strong class="command">[^\od]</strong></span> matches any single byte character excluding end-of-line characters. When used to search Unicode text, this escape does nothing. </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\om</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns on multi-line matching. This enhances the match character set, or match any character primitives to support matching end-of-line characters. For example, <span><strong class="command">\om.+</strong></span> matches the rest of the buffer. </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\ol</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Turns off multi-line matching (default). You can still use <span><strong class="command">\n</strong></span> to create regular expressions which match one or more lines. However, expressions like <span><strong class="command">.+</strong></span> will not match multiple lines. This is much safer and usually faster than using the <span><strong class="command">\om</strong></span> option.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oi</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Ignore case. Turns off case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside the current grouping level, after which case matching is restored to the previous case match setting. See also <span><strong class="command">\oc</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\oc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Case-sensitive match. Turns on case-sensitive matching in the pattern, overriding the global case setting. This modifier is localized inside the current grouping level, after which case matching is restored to the previous case match setting. See also <span><strong class="command">\oi</strong></span>.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Declares character after slash to be literal. For example, <span><strong class="command">\*</strong></span> represents the star character.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">\:</strong></span>
                  <span class="emphasis"><em>char</em></span>
                </p>
              </td><td>
                <p class="CellBody">Matches predefined expression corresponding to <span class="emphasis"><em>char</em></span>. The pre-defined expressions are:</p>
                <p class="CellBody"></p>
                <div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
                      <span><strong class="command">\:a [A-Za-z0-9]</strong></span> - Matches an alphanumeric character.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:c [A-Za-z]</strong></span> - Matches an alphabetic character.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:b (?:[ \t]+)</strong></span> - Matches blanks.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:d [0-9]</strong></span> - Matches a digit.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:f (?:[^\[\]\:\\/&lt;&gt;|=+;, \t"']+)</strong></span> - Windows: Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:f (?:[^/ \t"']+)</strong></span> - UNIX: Matches a file name part.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:h (?:[0-9A-Fa-f]+)</strong></span> - Matches a hex number.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:i (?:[0-9]+)</strong></span> - Matches an integer.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:n (?:(?:[0-9]+(?:\.[0-9]+|)|\.[0-9]+)(?:[Ee](?:\+|-|)[0-9]+|))</strong></span> - Matches a floating number.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:p (?:(?:[A-Za-z]:|)(?:\\|/|)(?:\:f(?:\\|/))*\:f)</strong></span> - Windows: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:p (?:(?:/|)?:(?::f(/))*\:f)</strong></span> - UNIX: Matches a path.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:q (?:\"[^\"]*\"|'[^']*')</strong></span> - Matches a quoted string.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:v (?:[A-Za-z_$][A-Za-z0-9_$]*)</strong></span> - Matches a C variable.</p></li><li><p class="NormalText">
                      <span><strong class="command">\:w (?:[A-Za-z]+)</strong></span> - Matches a word.</p></li></ul></div>
                <div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="warning" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Warning</h3><p class="CellBody"><span class="bold"><strong>\:f</strong></span> and <span class="bold"><strong>\:p</strong></span></p><p class="NormalText"><span class="bold"><strong>Windows</strong></span> - this regular 
                    expression should not be used to validate an operating system filename. The intent 
                    with this predefined regular expression is to make it useful in practice for handling 
                    filenames output from compilers and filenames in source files. For example, space 
                    characters in filenames are not allowed. </p><p class="NormalText"><span class="bold"><strong>Unix</strong></span> - this regular 
                      expression should not be used to validate an operating system filename. The intent 
                      with this predefined regular expression is to make it useful in practice for 
                      handling filenames output from compilers and filenames in source files. For 
                      example, space, :, &#8220;, and " characters in filenames are not allowed even 
                      though the OS allows them. In the future, we may add &lt; and &gt; to the list of 
                      characters not allowed in a filename.</p></div>
              </td></tr></tbody></table></div><p class="NormalText">The precedence of operators, from highest to lowest, is as follows:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span><strong class="command">+</strong></span>, <span><strong class="command">*</strong></span>, <span><strong class="command">?</strong></span>, <span><strong class="command">{}</strong></span>, <span><strong class="command">+?</strong></span>, <span><strong class="command">*?</strong></span>, <span><strong class="command">??</strong></span>, <span><strong class="command">{}?</strong></span> (These operators have the same precedence.)</p></li><li><p class="NormalText">concatenation</p></li><li><p class="NormalText">
            <span><strong class="command">|</strong></span>
          </p></li></ul></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_regularexpressions_13949_1008146"></a>
          <a class="indexterm" name="sect_regularexpressions_E2D08C60_A978"></a>
          <a class="indexterm" name="sect_regularexpressions_DDCBF986_E084"></a>
          <a class="indexterm" name="sect_regularexpressions_3DB1171B_298F"></a>UNIX Regular Expression Examples</h5></div></div></div><p class="NormalText">The table below shows examples of UNIX regular expressions.</p><div class="informaltable"><a name="table_a3547764-c643-44ed-8810-8fea8621cf23"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">UNIX Regular Expression Example</p>
                </th><th>
                  <p class="CellHeading">Description</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^defproc</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the word <span class="bold"><strong>defproc</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^definit$</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that only contain the word <span class="bold"><strong>definit</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^\*name</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines that begin with the string <span class="bold"><strong>*name</strong></span>. Notice that the backslash must prefix the special character <span class="bold"><strong>*</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\t ]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\d9\d32]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\x9\x20]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches tab and space characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">p.t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches any three-letter string starting with the letter <span><strong class="keycap">p</strong></span> and ending with the letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>pot</strong></span> and <span class="bold"><strong>pat</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">s.*?t</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the letter <span><strong class="keycap">s</strong></span> followed by any number of characters followed by the nearest letter <span><strong class="keycap">t</strong></span>. Two possible matches are <span class="bold"><strong>seat</strong></span> and <span class="bold"><strong>st</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">for|while</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches the strings <span><strong class="command">for</strong></span> or <span><strong class="command">while</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">^\:p</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches lines beginning with a file name.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">xy+z</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches <span class="bold"><strong>x</strong></span> followed by one or more occurrences of <span class="bold"><strong>y</strong></span> followed by <span class="bold"><strong>z</strong></span>.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[a-z-[qw]]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Character set subtraction. Matches all English lowercase letters except <span class="bold"><strong>q</strong></span> and <span class="bold"><strong>w</strong></span>. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\p{isGreek}&amp;[\p{L}]]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Character set intersection. Matches all Unicode letters in the Greek block. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">\x{6587}</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches Unicode character with hexadecimal value <span class="bold"><strong>6587</strong></span>. Character set intersection. Matches all Unicode letters in the Greek block. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command"> [\p{L}-[qw]]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode letters except <span class="bold"><strong>q</strong></span> and <span class="bold"><strong>w</strong></span>. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command"> [\p{L}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode letters. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\p{Lul}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode uppercase and lowercase letters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\P{L}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode characters that are not letters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span><strong class="command">[\p{isGreek}]</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches all Unicode characters in the Greek block. </p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\x0d\x0a\x01\x02</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches a sequence of hex binary characters.</p>
                </td></tr><tr><td>
                  <p class="CellBody">
                    <span class="bold"><strong>\d13\d10\d1\d2</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Matches a sequence of decimal binary characters.</p>
                </td></tr></tbody></table></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="Wildcards"></a>
        <a name="sect_regularexpressions_13949_1008238"></a>Wildcard Expressions</h4></div></div></div><p class="NormalText">
        SlickEdit® supports <span><strong class="command">*</strong></span>, <span><strong class="command">?</strong></span>, and <span><strong class="command">#</strong></span> wildcards:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">The asterisk (<span><strong class="command">*</strong></span>) matches zero or more characters. For example, search for <span class="bold"><strong>a*b</strong></span> to find any string that contains a lowercase letter "a" followed by a lowercase letter "b" allowing for text in between.</p></li><li><p class="NormalText">The question mark (<span><strong class="command">?</strong></span>) matches any single character. Use multiple question marks in succession to represent that number of characters. For example, search for <span><strong class="command">a???b</strong></span> to find any string that contains a lowercase letter "a" followed by any three characters, followed by a lowercase letter "b".</p></li><li><p class="NormalText">The pound sign (<span><strong class="command">#</strong></span>) matches any single digit, 0-9. Use multiple pound signs in succession to represent that number of digits. For example, use <span class="bold"><strong>##:##</strong></span> to search for four-digit time-of-day values.</p></li></ul></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_regularexpressions_13949_18610"></a>
      <a name="sect_regularexpressions_13949_1008244"></a>Unicode Categories and Character Blocks</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_62848"></a>
        <a name="sect_regularexpressions_13949_1008248"></a>
        <a class="indexterm" name="sect_regularexpressions_26744DF8_9689"></a>
        <a class="indexterm" name="sect_regularexpressions_820AF902_F6A7"></a>Unicode Category Specifications for Regular Expressions</h4></div></div></div><p class="NormalText">The Unicode consortium standard regular expression categories are supported. The syntax for specifying categories is:</p><pre class="programlisting">\p{MainCategoryLetter Subcategories}</pre><p class="NormalText">The above syntax matches the categories specified. The following syntax matches all characters <span class="emphasis"><em>not</em></span> in the categories specified:</p><pre class="programlisting">\P{MainCategoryLetter Subcategories}</pre><p class="NormalText">The <span><strong class="command">\p</strong></span> and <span><strong class="command">\P</strong></span> notations can only be used inside a character set specification. <span class="emphasis"><em>MainCategoryLetter</em></span> can be <span><strong class="command">L</strong></span>, <span><strong class="command">M</strong></span>, <span><strong class="command">N</strong></span>, <span><strong class="command">P</strong></span>, <span><strong class="command">S</strong></span>, <span><strong class="command">Z</strong></span>, or <span><strong class="command">C</strong></span>. The valid <span class="emphasis"><em>Subcategories</em></span> depend on the <span class="emphasis"><em>MainCategoryLetter</em></span> specified. If no <span class="emphasis"><em>Subcategories</em></span> are specified, all are assumed. For example:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span><strong class="command">[\p{L}]</strong></span> matches all Unicode letters.</p></li><li><p class="NormalText">
            <span><strong class="command">[\p{Lul}]</strong></span> matches all uppercase and lowercase letters.</p></li><li><p class="NormalText">
            <span><strong class="command">[\P{L}]</strong></span> matches all characters that are not letters.</p></li></ul></div><p class="NormalText">The following table lists the valid subcategories for a specific main category. These character tables were generated using the file <code class="filename">UnicodeData-3.1.0.txt</code> found on the Unicode Consortium Web site 
(<span class="emphasis"><em>http://unicode.org</em></span>).</p><div class="informaltable"><a name="table_5bac8588-6b6a-446e-bccb-16c5a407ce3e"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Subcategory</p>
              </th><th>
                <p class="CellHeading">Description</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Lu</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Letter, Uppercase </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Ll</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Letter, Lowercase</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Lt</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Letter, Titlecase</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Lo</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Letter, Other</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Mn</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Mark, Non-Spacing </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Mc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Mark, Spacing Combining </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Me</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Mark, Enclosing </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Nd</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Number, Decimal Digit </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Nl</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Number, Letter </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">No</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Number, Other </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Pc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Punctuation, Connector </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Pd</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Punctuation, Dash </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Ps</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Punctuation, Open </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Pe</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Punctuation, Close </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Pi</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Punctuation, Initial quote (may behave like <span><strong class="command">Ps</strong></span> or <span><strong class="command">Pe</strong></span> depending on usage)</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Pf</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Punctuation, Final quote (may behave like <span><strong class="command">Ps</strong></span> or <span><strong class="command">Pe</strong></span> depending on usage) </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Po</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Punctuation, Other </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Sm</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Symbol, Math </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Sc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Symbol, Currency </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Sk</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Symbol, Modifier </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">So</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Symbol, Other </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Zs</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Separator, Space </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Zl</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Separator, Line </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Zp</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Separator, Paragraph </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Cc</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Other, Control </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Cf</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Other, Format </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Cs</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Other, Surrogate </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Co</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Other, Private Use </p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">Cn</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Other, Not Assigned (no characters in the file have this property)</p>
              </td></tr></tbody></table></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_regularexpressions_13949_76576"></a>
        <a name="sect_regularexpressions_13949_1008382"></a>
        <a class="indexterm" name="sect_regularexpressions_86F04ABA_9C5F"></a>
        <a class="indexterm" name="sect_regularexpressions_6E493A9F_E31F"></a>Unicode Character Blocks for Regular Expressions</h4></div></div></div><p class="NormalText">The Unicode consortium standard regular expression block categories are supported. The syntax for specifying a character block is:</p><pre class="programlisting">\p{Is BlockName}</pre><p class="NormalText">The above syntax matches the characters in the block specified. The following syntax matches all characters <span class="emphasis"><em>not</em></span> in the block specified:</p><pre class="programlisting">\P{Is BlockName }</pre><p class="NormalText">The <span><strong class="command">\p</strong></span> and <span><strong class="command">\P</strong></span> notations may only be used inside a character set specification. For example, <span><strong class="command">[\p{isBasicLatin}]</strong></span> matches all characters in the Greek block. <span><strong class="command">[\P{isBasicLatin}]</strong></span> matches all characters that are not in the Greek block. </p><p class="NormalText">The following table lists the non-standard valid character block names. 
        These character tables were generated from XML standards found at the <a href="http://www.w3c.org" target="_blank"><em class="citetitle">World Wide Web Consortium Web site</em></a>).</p><div class="informaltable"><a name="table_36ce3ea7-a9c6-458e-8daa-7526faab3d03"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Block Name</p>
              </th><th>
                <p class="CellHeading">Description</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">
                  <span><strong class="command">XMLNameStartChar</strong></span>
                </p>
              </td><td>
                <p class="CellBody">All characters that are valid for the start of an XML tag name.</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">XMLNameChar</strong></span>
                </p>
              </td><td>
                <p class="CellBody">All characters that are valid in an XML tag name.</p>
              </td></tr></tbody></table></div><p class="NormalText">The following table lists the valid character block names. These character tables were generated using the <code class="filename">blocks.txt</code> file found on the Unicode Consortium Web site (<span class="emphasis"><em>http://unicode.org</em></span>).</p><div class="informaltable"><a name="table_9c6bb0f2-ac45-43ee-96a1-edfbb4747815"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th>
                <p class="CellHeading">Range</p>
              </th><th>
                <p class="CellHeading">Block Name</p>
              </th></tr></thead><tbody><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0000..007F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">BasicLatin</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0080..00FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Latin-1Supplement</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0100..017F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">LatinExtended-A</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0180..024F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">LatinExtended-B</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0250..02AF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">IPAExtensions</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">02B0..02FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">SpacingModifierLetters</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0300..036F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CombiningDiacriticalMarks</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0370..03FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Greek</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0400..04FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Cyrillic</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0530..058F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Armenian</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0590..05FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Hebrew</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0600..06FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Arabic</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0700..074F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Syriac</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0780..07BF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Thaana</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0900..097F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Devanagari</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0980..09FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Bengali</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0A00..0A7F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Gurmukhi</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0A80..0AFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Gujarati</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0B00..0B7F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Oriya</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0B80..0BFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Tamil</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0C00..0C7F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Telugu</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0C80..0CFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Kannada</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0D00..0D7F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Malayalam</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0D80..0DFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Sinhala</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0E00..0E7F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Thai</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0E80..0EFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Lao</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">0F00..0FFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Tibetan</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1000..109F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Myanmar</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">10A0..10FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Georgian</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1100..11FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">HangulJamo</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1200..137F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Ethiopic</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">13A0..13FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Cherokee</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1400..167F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">UnifiedCanadianAboriginalSyllabics</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1680..169F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Ogham</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">16A0..16FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Runic</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1780..17FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Khmer</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1800..18AF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Mongolian</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1E00..1EFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">LatinExtendedAdditional</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1F00..1FFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">GreekExtended</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2000..206F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">GeneralPunctuation</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2070..209F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">SuperscriptsandSubscripts</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">20A0..20CF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CurrencySymbols</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">20D0..20FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CombiningMarksforSymbols</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2100..214F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">LetterlikeSymbols</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2150..218F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">NumberForms</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2190..21FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Arrows</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2200..22FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">MathematicalOperators</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2300..23FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">MiscellaneousTechnical</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2400..243F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">ControlPictures</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2440..245F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">OpticalCharacterRecognition</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2460..24FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">EnclosedAlphanumerics</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2500..257F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">BoxDrawing</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2580..259F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">BlockElements</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">25A0..25FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">GeometricShapes</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2600..26FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">MiscellaneousSymbols</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2700..27BF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Dingbats</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2800..28FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">BraillePatterns</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2E80..2EFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKRadicalsSupplement</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2F00..2FDF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">KangxiRadicals</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2FF0..2FFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">IdeographicDescriptionCharacters</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3000..303F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKSymbolsandPunctuation</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3040..309F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Hiragana</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">30A0..30FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Katakana</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3100..312F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Bopomofo</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3130..318F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">HangulCompatibilityJamo</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3190..319F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Kanbun</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">31A0..31BF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">BopomofoExtended</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3200..32FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">EnclosedCJKLettersandMonths</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3300..33FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKCompatibility</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">3400..4DB5</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKUnifiedIdeographsExtensionA</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">4E00..9FFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKUnifiedIdeographs</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">A000..A48F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">YiSyllables</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">A490..A4CF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">YiRadicals</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">AC00..D7A3</strong></span>
                </p>
              </td><td>
                <p class="CellBody">HangulSyllables</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">D800..DB7F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">HighSurrogates</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">DB80..DBFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">HighPrivateUseSurrogates</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">DC00..DFFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">LowSurrogates</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">E000..F8FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">PrivateUse</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">F900..FAFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKCompatibilityIdeographs</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FB00..FB4F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">AlphabeticPresentationForms</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FB50..FDFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">ArabicPresentationForms-A</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FE20..FE2F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CombiningHalfMarks</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FE30..FE4F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKCompatibilityForms</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FE50..FE6F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">SmallFormVariants</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FE70..FEFE</strong></span>
                </p>
              </td><td>
                <p class="CellBody">ArabicPresentationForms-B</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FEFF..FEFF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Specials</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FF00..FFEF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">HalfwidthandFullwidthForms</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">FFF0..FFFD</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Specials</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">10300..1032F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">OldItalic</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">10330..1034F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Gothic</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">10400..1044F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Deseret</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1D000..1D0FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">ByzantineMusicalSymbols</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1D100..1D1FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">MusicalSymbols</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">1D400..1D7FF</strong></span>
                </p>
              </td><td>
                <p class="CellBody">MathematicalAlphanumericSymbols</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">20000..2A6D6</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKUnifiedIdeographsExtensionB</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">2F800..2FA1F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">CJKCompatibilityIdeographsSupplement</p>
              </td></tr><tr><td>
                <p class="CellBody">
                  <span><strong class="command">E0000..E007F</strong></span>
                </p>
              </td><td>
                <p class="CellBody">Tags</p>
              </td></tr></tbody></table></div><p class="NormalText"></p><p class="NormalText"></p></div></div></div></body></html>
