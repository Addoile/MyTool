<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Chapter 7.  Building, Running, and Debugging</title><link rel="stylesheet" href="slickedit_help.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.71.1"><link rel="start" href="index.htm" title="Welcome to SlickEdit 2013"><link rel="up" href="index.htm" title="Welcome to SlickEdit 2013"><link rel="prev" href="ch06s02.htm" title="Building and Managing Tag Files"><link rel="next" href="ch07s02.htm" title="Running and Debugging"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><p class="HeaderText"><a href="index.htm#contents">Contents</a> : <a href="ix01.htm">Index</a> : <a href="search.htm">Search</a></p><hr><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a name="chapter_8148a5ab-3f33-44b5-b101-35dc9da99b76"></a>Chapter 7. 
      <a name="chap_buildrundebug_12979_999029"></a>Building, Running, and Debugging</h2></div></div></div><p class="NormalText">This chapter contains the following topics:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
        <a href="ch07.htm#sect_buildingandcompiling_14399_80556">Building and Compiling</a>
      </p></li><li><p class="NormalText">
        <a href="ch07s02.htm">Running and Debugging</a>
      </p></li><li><p class="NormalText">
        <a href="ch07s03.htm">Working with Google Web Toolkit Projects</a>
      </p></li><li><p class="NormalText">
        <a href="ch07s04.htm">Working with Android Projects</a>
      </p></li></ul></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="sect_buildingandcompiling_14399_80556"></a>
    <a name="sect_buildingandcompiling_14399_998341"></a>
    <a class="indexterm" name="sect_buildingandcompiling_5011B88A_BB58"></a>
    <a class="indexterm" name="sect_buildingandcompiling_56B2659A_0FFA"></a>Building and Compiling</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_buildingandcompiling_14399_19990"></a>
      <a name="sect_buildingandcompiling_14399_1009592"></a>Project Configurations in Builds</h3></div></div></div><p class="NormalText">Each project may have a number of configurations defined. See <a href="ch05.htm#sect_workingwithworkspacesandprojects_15038_79593">Project Configurations</a> for more information on creating and managing Project Configurations. The active configuration is used during the build process to determine the project settings to use. The manner in which the configuration affects a build depends on which build system you are using.</p><p class="NormalText">The build system is specified by selecting<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span> from the main menu and then selecting the Build tab. The first and third options, <span><strong class="guilabel">Build without a makefile</strong></span> and <span><strong class="guilabel">Build with an auto-generated, auto-maintained makefile</strong></span>, use the SlickEdit® build system. The second option, <span><strong class="guilabel">Build with a user-maintained makefile or custom build command</strong></span>, allows you to use a custom makefile or configure build commands on the Tools tab.</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">If you use the SlickEdit build system, SlickEdit will use the project properties associated with the currently active configuration. It will direct the build output to a directory with the same name as the project configuration. For example, if Debug is active, SlickEdit will direct the build output to a directory, named "Debug", inside the project directory. You can specify an output directory for a configuration by selecting <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Configurations</strong></span> from the main menu, and then enter a directory in the <span><strong class="guilabel">Object directory</strong></span> field.</p></li><li><p class="NormalText">If you are using custom build commands on the Tools tab, you can use the <span><strong class="command">%b</strong></span> (current configuration) or <span><strong class="command">%bd</strong></span> (object directory) escape sequences to implement configuration-specific build behaviors.</p></li><li><p class="NormalText">If you are using a custom makefile, you can define a macro, such as CFG, which represents the configuration you want to build. Add code to the makefile to check for this macro and perform different statements, like choosing different compile options or a different directory for object files. The makefiles exported from Visual C++ already define a CFG macro. For a standard make program you will need to use the <span class="emphasis"><em>name</em></span><span><strong class="command">=</strong></span><span class="emphasis"><em>value</em></span> syntax when passing a macro to the make program. For example:</p><p class="NormalText">
          <span><strong class="command">make CFG=Debug</strong></span>
        </p></li></ul></div><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Note</h3><p class="CellBody">SlickEdit uses the vsbuild utility for all 3 build methods. Even when you 
        build using a custom build command or makefile, SlickEdit uses vsbuild as a wrapper to set up the 
        environment and to determine when the build has completed.</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_buildingandcompiling_14399_95395"></a>
      <a name="sect_buildingandcompiling_14399_1001661"></a>
      <a class="indexterm" name="sect_buildingandcompiling_BD89E858_B286"></a>Using Build and Compile Operations</h3></div></div></div><p class="NormalText">SlickEdit® provides the capability to build a project or compile single files.</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">To build the active project, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span> from the main menu, press <span><strong class="keycap">Ctrl</strong></span>+<span><strong class="keycap">M</strong></span>, or use the <span><strong class="command">project_build</strong></span> command.</p></li><li><p class="NormalText">To build a different project, open the Projects view, right-click on a project and select <span><strong class="guimenu">Build</strong></span>.</p></li><li><p class="NormalText">To compile the file in the active editor window, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Compile</strong></span> from the main menu, press <span><strong class="keycap">Shift</strong></span>+<span><strong class="keycap">F10</strong></span>, or use the <span><strong class="command">project_compile</strong></span> command.</p></li><li><p class="NormalText">To compile a different file, display the Projects tool window, right-click on a file, and select <span><strong class="guimenu">Compile</strong></span>.</p></li></ul></div><p class="NormalText">If your workspace contains multiple projects, sometimes one or more projects must be compiled before a particular project can be compiled. Click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span> and then select the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_41995">Dependencies Tab</a> to view or set dependencies for the active project. Alternatively, you can right-click on a project in the Projects view and select <span><strong class="guimenu">Dependencies</strong></span>, allowing you to set dependencies for a project that is not active.</p><p class="NormalText">Before you can execute the Build or Compile commands you must set the current project or define an extension-based project. To define an extension-based project command, use the language-specific <span><strong class="guilabel">General</strong></span> options screen (see <a href="ch05.htm#sect_workingwithworkspacesandprojects_15038_59725">Defining Language-Specific Projects</a>). You will probably want the Build command to be based on the current project and not the current extension. Use the <span><strong class="command">workspace_new</strong></span> command (<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">New</strong></span>) to create a workspace or project. If the current project has a Compile command defined, the language-specific project Compile command will be ignored.</p><p class="NormalText">By default, the Build or Compile command is executed in the Build window. This allows you to continue editing while the compiler runs. You can process the error messages as they appear in the Build window instead of waiting until the compile process finishes. Use the <span><strong class="command">stop_process</strong></span> command or click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Stop Build</strong></span> to stop the compiler running. To send the compile output to an editor window (named <code class="filename">.process</code>), right-click in the Build window and select <span><strong class="guimenu">Send Compile Output to Editor Window</strong></span>. </p><p class="NormalText">To customize the Build and Compile commands, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>. Select the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_59558">Tools Tab</a>, then select an operation from the list: Build, Compile, or Rebuild. Depending on the language and your other project settings, either a command line or an <span><strong class="guibutton">Options</strong></span> button will be displayed allowing you to configure the operation.</p><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_1001645"></a>
        <a class="indexterm" name="sect_buildingandcompiling_EE1E67B8_42DB"></a>
        <a class="indexterm" name="sect_buildingandcompiling_284257E3_D8BF"></a>Compiling a Project</h4></div></div></div><p class="NormalText">The Build menu items <span><strong class="guimenu">Compile</strong></span> and <span><strong class="guimenu">Build</strong></span> start the compile and build commands respectively for the current project. If you selected a compiler package, you can try these commands now. To change these commands and a few other project options, use the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_59558">Tools Tab</a> of the Project Properties dialog box (<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>). The <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Next Error</strong></span> and <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Previous Error</strong></span> menu items allow quick navigation of compiler errors.</p><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_1002073"></a>
          <a class="indexterm" name="sect_buildingandcompiling_BFB8CD1A_A91B"></a>
          <a class="indexterm" name="sect_buildingandcompiling_2F61F06C_2EDF"></a>Using VSBUILD to Compile</h5></div></div></div><p class="NormalText">Use the utility program <span><strong class="command">vsbuild</strong></span> to compile files in a project and process dependencies between projects. This tool is intended to help implement project support. It has a built-in make facility for Java and C++, performs project dependencies, and processes pre- and post-build commands. For example, if <code class="filename">file1.java</code> references <code class="filename">file2.java</code> which references <code class="filename">file3.java</code> and <code class="filename">file3.java</code> is modified, then when you invoke the Build command, <code class="filename">file1.java</code>, <code class="filename">file2.java</code>, <code class="filename">file3.java</code> will be recompiled. Invoking <span><strong class="command">vsbuild</strong></span> with no parameters displays invocation options.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_1002017"></a>
          <a class="indexterm" name="sect_buildingandcompiling_D7DA9E8B_0B3A"></a>
          <a class="indexterm" name="sect_buildingandcompiling_AB096B24_EC07"></a>Compiling a Visual C++ Project</h5></div></div></div><p class="NormalText">For Visual C++ v5.x and v6.x, the default compile command uses the nmake program which requires a makefile (<code class="filename">.mak</code> extension). Visual C++ v5.x and v6.x do not automatically create a makefile for you. Use <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Export Makefile</strong></span> in Visual C++ to create or update the makefile. For Visual C++ v5.x or higher, the default build and rebuild commands do not need a makefile.</p><p class="NormalText">You can customize the compile, build, and rebuild commands from the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_59558">Tools Tab</a> of the Project Properties dialog box (<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Properties</strong></span>).</p><p class="NormalText">If you get an error when you run nmake, you need to run the <code class="filename">VCVARS32.BAT</code> file (shipped with Visual C++) in a DOS box that you start the editor from. This will set the environment so that the editor can run these compiles.</p></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_1001622"></a>
        <a class="indexterm" name="sect_buildingandcompiling_E38BF810_540E"></a>
        <a class="indexterm" name="sect_buildingandcompiling_73623375_5213"></a>Specifying Build on Save</h4></div></div></div><p class="NormalText">A build can be automatically launched upon saving the file or files within a project. To specify this option and to toggle it on/off, from the main menu click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build Automatically on Save</strong></span>. By default this option is not selected.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_35120"></a>
        <a name="sect_buildingandcompiling_14399_1004493"></a>
        <a class="indexterm" name="sect_buildingandcompiling_68EF39E5_AD1C"></a>Specifying Open Commands</h4></div></div></div><p class="NormalText">The <a href="ch12s05.htm#sect_project_menuanddialogs_13898_76761">Open Tab</a> of the Project Properties dialog (<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>) lets you enter commands that are executed when the project is activated. This information is stored per project, not per configuration. This tab is unavailable for extension-based projects.</p><p class="NormalText">To enter a new command to be opened for a project, simply type the command(s) in the editor control window. Each line should contain a command just as you would type it on the command line. You can set environment variables in the concurrent build window with the <span><strong class="command">set</strong></span> command. For example, the command <span><strong class="command">set </strong></span><span class="emphasis"><em>xxx</em></span><span><strong class="command">=</strong></span><span class="emphasis"><em>yyy</em></span> sets the environment variable <span class="emphasis"><em>xxx</em></span> to the value <span class="emphasis"><em>yyy</em></span>. This automatically supports different UNIX shells. Use <span><strong class="command">concur_command</strong></span> to send a command string to the concurrent build window, for example: <span><strong class="command">concur_command export name=value</strong></span>.</p></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_11363_36798"></a>
        <a class="indexterm" name="sect_buildingandcompiling_61155_17486"></a>Escape Sequences for Build Commands</h4></div></div></div><p class="NormalText">The following escape sequences may be used when creating build 
        commands using the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_59558">Tools Tab</a> on the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_53193">Project Properties Dialog</a>.</p><div class="informaltable"><a name="sect_buildingandcompiling_19839_40630"></a><table border="1"><colgroup><col><col></colgroup><thead><tr><th><p class="CellHeading">Sequence</p></th><th><p class="CellHeading">Expands to</p></th></tr></thead><tbody><tr><td><p class="CellBody">%B</p></td><td><p class="CellBody">Configuration</p></td></tr><tr><td><p class="CellBody">%BD</p></td><td><p class="CellBody">Configuration build directory</p></td></tr><tr><td><p class="CellBody">%BN</p></td><td><p class="CellBody">Configuration name.  Same as %B option except for Visual C++ configuration names where configuration names are of the form CFG="[ConfigName]" or [ConfigName]|[Platform]</p></td></tr><tr><td><p class="CellBody">%C</p></td><td><p class="CellBody">Current word</p></td></tr><tr><td><p class="CellBody">%CP</p></td><td><p class="CellBody">Java class path including <span class="bold"><strong>-classpath</strong></span></p></td></tr><tr><td><p class="CellBody">%DEFD</p></td><td><p class="CellBody">Configuration defines with dashes.  Example: %DEFD, project def = 'test' produces '"-Dtest"</p></td></tr><tr><td><p class="CellBody">%DEFS</p></td><td><p class="CellBody">Configuration defines with slashes.  Example: %DEFS, project def = 'test' produces '"/Dtest"</p></td></tr><tr><td><p class="CellBody">%DM</p></td><td><p class="CellBody">The file name only of the current buffer</p></td></tr><tr><td><p class="CellBody">%E</p></td><td><p class="CellBody">File extension with dot</p></td></tr><tr><td><p class="CellBody">%F</p></td><td><p class="CellBody">Absolute filename</p></td></tr><tr><td><p class="CellBody">%H</p></td><td><p class="CellBody">(Java only) Builds a temp HTML file to run the compiled applet, %H is replaced by the temp HTML file name</p></td></tr><tr><td><p class="CellBody">%I</p></td><td><p class="CellBody">Absolute include directories (individually listed) including '-i'.  Example: '-ic:\folder1 -ic:\folder2'</p></td></tr><tr><td><p class="CellBody">%IR</p></td><td><p class="CellBody">Relative include directories (to the project) including '-I', seperated by semicolons (colons on UNIX).  Example: '-Ic:\folder1;c:\folder2'</p></td></tr><tr><td><p class="CellBody">%IN</p></td><td><p class="CellBody">Absolute include directories (individually listed) including '-i '.  Example: '-i c:\folder1 -i c:\folder2'</p></td></tr><tr><td><p class="CellBody">%JBD</p></td><td><p class="CellBody">Java build directory including -d</p></td></tr><tr><td><p class="CellBody">%LF</p></td><td><p class="CellBody">Current buffer name</p></td></tr><tr><td><p class="CellBody">%LIBS</p></td><td><p class="CellBody">Libraries space delimited</p></td></tr><tr><td><p class="CellBody">%M</p></td><td><p class="CellBody">Calls a macro function.  Any return value is included in the build command. Must be terminated by a matching %.   Example: %Mmy_function%, where my_function() is a macro function</p></td></tr><tr><td><p class="CellBody">%N</p></td><td><p class="CellBody">Filename without extension or path</p></td></tr><tr><td><p class="CellBody">%O</p></td><td><p class="CellBody">Output filename.  Currently only GNU projects have an output filename on the Link Tab</p></td></tr><tr><td><p class="CellBody">%OBJS</p></td><td><p class="CellBody">Project objects (including libraries)</p></td></tr><tr><td><p class="CellBody">%OE</p></td><td><p class="CellBody">Output extension with dot</p></td></tr><tr><td><p class="CellBody">%ON</p></td><td><p class="CellBody">Output filename with no extension or path</p></td></tr><tr><td><p class="CellBody">%OP</p></td><td><p class="CellBody">Output path</p></td></tr><tr><td><p class="CellBody">%P</p></td><td><p class="CellBody">Path of current file</p></td></tr><tr><td><p class="CellBody">%Q#</p></td><td><p class="CellBody">The current file's path (no file name) starting with the folder item indicated by #.  Example: %Q2, current file = 'c:\a\b\c\d\test.txt' produces '\b\c\d\'</p></td></tr><tr><td><p class="CellBody">%R</p></td><td><p class="CellBody">Absolute project name</p></td></tr><tr><td><p class="CellBody">%RE</p></td><td><p class="CellBody">Project extension</p></td></tr><tr><td><p class="CellBody">%RM</p></td><td><p class="CellBody">Project display name (for associated workspaces)</p></td></tr><tr><td><p class="CellBody">%RN</p></td><td><p class="CellBody">Project filename without extension or path</p></td></tr><tr><td><p class="CellBody">%RP</p></td><td><p class="CellBody">Project path</p></td></tr><tr><td><p class="CellBody">%RV</p></td><td><p class="CellBody">(Windows only) Project drive with :</p></td></tr><tr><td><p class="CellBody">%RW</p></td><td><p class="CellBody">Project working directory</p></td></tr><tr><td><p class="CellBody">%T</p></td><td><p class="CellBody">Project configuration target</p></td></tr><tr><td><p class="CellBody">%V</p></td><td><p class="CellBody">(Windows Only) Drive of current file with :</p></td></tr><tr><td><p class="CellBody">%W</p></td><td><p class="CellBody">Absolute workspace filename</p></td></tr><tr><td><p class="CellBody">%WE</p></td><td><p class="CellBody">Workspace extension with dot</p></td></tr><tr><td><p class="CellBody">%WN</p></td><td><p class="CellBody">Workspace filename with no extension or path</p></td></tr><tr><td><p class="CellBody">%WP</p></td><td><p class="CellBody">Workspace path</p></td></tr><tr><td><p class="CellBody">%WV or %WD</p></td><td><p class="CellBody">Workspace drive with :</p></td></tr><tr><td><p class="CellBody">%WX</p></td><td><p class="CellBody">The workspace folder name only.  Example: %WX, workspace = 'c:\a\b\c\workspace.vpw' produces 'c'</p></td></tr><tr><td><p class="CellBody">%XUP </p></td><td><p class="CellBody">Translate all back slashes that follow to forward slashes (UNIX file separator)</p></td></tr><tr><td><p class="CellBody">%XWP</p></td><td><p class="CellBody">Translate all forward slashes to back slashes (Windows file separator)</p></td></tr><tr><td><p class="CellBody">%-#</p></td><td><p class="CellBody">Removes the previous # characters</p></td></tr><tr><td><p class="CellBody">%(envvar)</p></td><td><p class="CellBody">Value of environment variable envvar</p></td></tr><tr><td><p class="CellBody">%#</p></td><td><p class="CellBody">The # item in argline (items are seperated by spaces)</p></td></tr><tr><td><p class="CellBody">%{*.*}</p></td><td><p class="CellBody">A list of project files matching the pattern in braces</p></td></tr><tr><td><p class="CellBody">%[regkey]</p></td><td><p class="CellBody">Value of Windows registry entry. Example: %[HKLM:\Software\Microsoft\Communicator@InstallationDirectory]</p></td></tr><tr><td><p class="CellBody">%?</p></td><td><p class="CellBody">Prompts the user for a value.  The user input is then included in the build command. Must be terminated by a matching %. Example: %?Prompt text%, would prompt the user with the text 'Prompt text'.</p></td></tr><tr><td><p class="CellBody">%%</p></td><td><p class="CellBody">Percent character</p></td></tr></tbody></table></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_buildingandcompiling_14399_40828"></a>
      <a name="sect_buildingandcompiling_14399_1004539"></a>
      <a class="indexterm" name="sect_buildingandcompiling_0944A663_05C6"></a>
      <a class="indexterm" name="sect_buildingandcompiling_C77CE451_3256"></a>Language-Specific Build Methods</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_1001690"></a>
        <a class="indexterm" name="sect_buildingandcompiling_3C965EA5_E090"></a>
        <a class="indexterm" name="sect_buildingandcompiling_061FE778_7399"></a>
        <a class="indexterm" name="sect_buildingandcompiling_52D50B01_EF1E"></a>
        <a class="indexterm" name="sect_buildingandcompiling_B25EC2FE_C14D"></a>Build Methods for GNU C/C++</h4></div></div></div><p class="NormalText">There are three build methods available for GNU C/C++. With these build options you will not need to convert the current build methods to use the GNU debugger. You can select one of these build methods when you create a new GNU C/C++ Wizard project:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <a class="indexterm" name="sect_buildingandcompiling_E1B6217D_8554"></a>
            <span><strong class="guilabel">Build without a makefile (dependencies automatically checked)</strong></span> - When you use the GNU C/C++ Wizard and select this build option, no makefile is ever generated. Instead, our <span><strong class="command">vsbuild</strong></span> utility program determines what needs to be compiled dynamically. We recommend using this option when you are not worried about how the build gets done. Make sure the project include directories (<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>, select the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_32706">Directories Tab</a>) are set up correctly so include files may be found.</p></li><li><p class="NormalText">
            <span><strong class="guilabel">
              <a class="indexterm" name="sect_buildingandcompiling_B7A3E513_8F58"></a>Build with a user-maintained makefile or custom build command</strong></span> - When you use the GNU C/C++ Wizard and select this build option, no makefile is ever generated and by default the build command is set to <span><strong class="command">make</strong></span>. You can change the build command to anything you want using the Project Properties dialog (<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>, select the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_59558">Tools Tab</a>, select <span><strong class="guilabel">Build</strong></span> for the tool name). Choose this option when you already have your own method for building the source.</p></li><li><p class="NormalText">
            <a class="indexterm" name="sect_buildingandcompiling_52040F63_0D8A"></a>
            <span><strong class="guilabel">Build with an auto-generated, auto-maintained makefile</strong></span> - When you use the GNU C/C++ Wizard and select this build option, a makefile is automatically generated and updated when files are added to the project. We recommend using this option when you need a makefile and do not want to use the built-in <span><strong class="command">vsbuild</strong></span> utility. Make sure the project include directories (<span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Project Properties</strong></span>, select the <a href="ch12s05.htm#sect_project_menuanddialogs_13898_32706">Directories Tab</a>) are set up correctly so include files may be found. To start a build from outside the application, execute the following command where <span class="emphasis"><em>make</em></span> is the name of the make program, <span class="emphasis"><em>Makefile</em></span> is the name of the makefile, and <span class="emphasis"><em>ConfigName</em></span> is the name of the configuration: <span class="emphasis"><em>make</em></span><span><strong class="command">-f</strong></span><span class="emphasis"><em>Makefile</em></span><span><strong class="command">CFG=</strong></span><span class="emphasis"><em>ConfigName</em></span>.</p></li></ul></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_22549_51490"></a>Cygwin: Using GNU C/C++ 'alternatives' system</h5></div></div></div><p class="NormalText">On Cygwin, with version 4 of GNU C/C++, "gcc" and "g++" are symbolic 
          links to one of the version-specific executables: "gcc-3", "gcc-4", "g++-3", and "g++-4". A 
          proprietary system called "alternatives" is used to link the unversioned commands to the 
          version-specific ones.</p><p class="NormalText">This example shows how to configure which version is used:</p><pre class="programlisting">
$ /usr/sbin/alternatives --config g++

There are 2 programs which provide 'g++'.

  Selection    Command
-----------------------------------------------
*  1           /usr/bin/g++-4.exe
 + 2           /usr/bin/g++-3.exe

Enter to keep the current selection[+], or type selection number: 1
        </pre><p class="NormalText">SlickEdit uses the information from the alternatives system to run the 
          specified version of the compiler. This allows you to use the same build command within 
          SlickEdit as you do from the Cygwin shell. If you don't want to control this using the 
          alternatives sytem, you can configure the build system to use "gcc-3", "gcc-4", etc. Select 
          <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">GNU C Options</strong></span> then set the <span><strong class="guilabel">Compiler</strong></span> field on the 
          <span><strong class="guilabel">Compile</strong></span> tab and the <span><strong class="guilabel">Linker</strong></span> field on the 
          <span><strong class="guilabel">Link</strong></span> tab.</p></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_1001485"></a>
        <a class="indexterm" name="sect_buildingandcompiling_0C9190CB_2EAB"></a>
        <a class="indexterm" name="sect_buildingandcompiling_CB5C2083_F895"></a>
        <a class="indexterm" name="sect_buildingandcompiling_E016BAE1_F1D4"></a>Build Methods for Xcode</h4></div></div></div><p class="NormalText">When SlickEdit® opens an Xcode project, it creates a view of the project that is consistent with other SlickEdit workspaces. This creates a few discrepancies between from the view of the project that Xcode provides. The most noticeable difference is that the files in the project cannot be viewed in a single tree, rather the files are always separated by the target that uses the file. </p><p class="NormalText">There are build methods available when using Xcode. To open an Xcode project, complete the following steps:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the user interface, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Open Other Workspace </strong></span> &#8594; <span><strong class="guimenuitem">Xcode Project</strong></span>.</p></li><li><p class="NormalText">In the Directory window, select the <code class="filename">.Xcode</code><span><strong class="command"></strong></span>directory. This directory appears as a file inside the Finder.</p></li><li><p class="NormalText">From the File window, select the <code class="filename">project.pbxproj</code> file.</p></li><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Set Active Project</strong></span><span><strong class="command">.</strong></span></p></li><li><p class="NormalText">Select the project that you want to use.</p></li><li><p class="NormalText">Click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Set Active Configuration</strong></span>.</p></li><li><p class="NormalText">Select the style that you want.</p></li><li><p class="NormalText">Click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span>.</p></li><li><p class="NormalText">The project is then built, and you can work with your project.</p></li></ol></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_1009963"></a>
        <a class="indexterm" name="sect_buildingandcompiling_7D8001F9_BFA4"></a>
        <a class="indexterm" name="sect_buildingandcompiling_2CCCBA93_E787"></a>Build Methods for Ant and NAnt</h4></div></div></div><p class="NormalText">SlickEdit® supports Apache Ant XML build files and NAnt build files. Apache Ant is a popular make facility used to build Java components. NAnt is a .NET build tool that is similar to Ant.</p><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Note</h3><p class="CellBody"> Ant build files must end with the <code class="filename">.xml</code> extension in order to be recognized as build files. NAnt build files must end with the <code class="filename">.build</code> extension.</p></div><p class="NormalText">You must use SlickEdit projects for your Ant/NAnt files in order to access the commands that invoke build file targets. </p><p class="NormalText">When you open an Ant XML or NAnt build file, SlickEdit automatically either opens the project if it already exists, or creates a new project and adds the file to it. </p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <span class="bold"><strong>To open an Ant XML file</strong></span> - From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Open Other Workspace </strong></span> &#8594; <span><strong class="guimenuitem">Ant XML Build File</strong></span>, or use the <span><strong class="command">workspace_open_ant</strong></span> command.</p></li><li><p class="NormalText">
            <span class="bold"><strong>To open an NAnt build file</strong></span> - From the main menu, click <span><strong class="guimenu">Project </strong></span> &#8594; <span><strong class="guimenuitem">Open Other Workspace </strong></span> &#8594; <span><strong class="guimenuitem">NAnt .build file</strong></span>, or use the <span><strong class="command">workspace_open_nant</strong></span> command.</p></li></ul></div><p class="NormalText">Alternately, you can manually create a project and add the build files or add the files to an existing project.</p><p class="NormalText">When adding build files to a project, they are scanned for callable targets. If any targets are found in the file, the icon in the project tree is changed to the "bull's eye" icon.</p><p class="NormalText">See <a href="ch05.htm#sect_workingwithworkspacesandprojects_15038_45918">Creating Projects</a> and <a href="ch05.htm#sect_workingwithworkspacesandprojects_15038_65404">Adding and Removing Files</a> for more information about creating projects and adding files to them.</p><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_1009985"></a>
          <a class="indexterm" name="sect_buildingandcompiling_9DBB9EF5_4A76"></a>
          <a class="indexterm" name="sect_buildingandcompiling_327D88AE_A281"></a>
          <a class="indexterm" name="sect_buildingandcompiling_841B7A09_AED2"></a>
          <a class="indexterm" name="sect_buildingandcompiling_36490C70_4A51"></a>Invoking Ant or NAnt Targets</h5></div></div></div><p class="NormalText">Once you have a project that contains Ant or NAnt files, you can execute Ant or NAnt targets. The SlickEdit commands that invoke the build file targets are only available from the <span><strong class="guilabel">Build</strong></span> menu and the right-click context menu of the tree in the Projects tool window. </p><p class="NormalText">To execute a single target, pick the target menu item. For example, for Ant, from the main menu, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Execute Ant Target</strong></span>, then navigate to the target. To specify arguments or execute multiple targets, use the Select Multiple Targets menu item. For example, for Ant, from the main menu, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Execute Ant Target </strong></span> &#8594; <span><strong class="guimenuitem">Select Multiple Targets</strong></span>. Alternately, you can right-click on an Ant or NAnt project in the Projects tool window and execute one target or multiple targets.</p><p class="NormalText">The <span><strong class="guilabel">Execute Single Ant Target</strong></span> menu and the <span><strong class="guilabel">Choose Ant Target(s)</strong></span> dialog will display targets which are imported into the selected build file from other Ant files.  This behavior can be turned off at <span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Options </strong></span> &#8594; <span><strong class="guimenuitem">Languages </strong></span> &#8594; <span><strong class="guimenuitem">XML/Text Languages </strong></span> &#8594; <span><strong class="guimenuitem">Ant </strong></span> &#8594; <span><strong class="guimenuitem">Options</strong></span>.
        </p><div class="mediaobject"><img src="Resources/chooseanttargets.png"></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_1009993"></a>
          <a class="indexterm" name="sect_buildingandcompiling_17421F41_7E49"></a>
          <a class="indexterm" name="sect_buildingandcompiling_AFF6369E_80A0"></a>
          <a class="indexterm" name="sect_buildingandcompiling_97ADA869_52E3"></a>
          <a class="indexterm" name="sect_buildingandcompiling_D0D3EACE_F755"></a>
          <a class="indexterm" name="sect_buildingandcompiling_EC232958_B856"></a>Setting Shortcuts for Build and Rebuild</h5></div></div></div><p class="NormalText">To set up the 
          <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span> menu items or 
          <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Rebuild</strong></span> menu items 
          or both to invoke a specific set of targets, first select one of the target menu items:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">For Ant XML files, from the main menu, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Execute Ant Target </strong></span> &#8594; <span><strong class="guimenuitem">Select Multiple Targets</strong></span>, and choose <span><strong class="guilabel">Ant XML File</strong></span>.</p></li><li><p class="NormalText">For NAnt build files, click <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Execute NAnt target </strong></span> &#8594; <span><strong class="guimenuitem">Select Multiple Targets</strong></span>, and choose <span><strong class="guilabel">NAnt .build file</strong></span>.</p></li></ul></div><p class="NormalText">Then, complete the following steps:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">Check one or more targets and provide any additional arguments.</p></li><li><p class="NormalText">Check the <span><strong class="guilabel">Remember and use these settings for</strong></span> check box.</p></li><li><p class="NormalText">Select <span><strong class="guilabel">Build</strong></span> or <span><strong class="guilabel">Rebuild</strong></span> in the adjacent combo box.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span>.</p></li></ol></div></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_buildingandcompiling_14399_28113"></a>
      <a name="sect_buildingandcompiling_14399_1001531"></a>
      <a class="indexterm" name="sect_buildingandcompiling_72409965_F428"></a>
      <a class="indexterm" name="sect_buildingandcompiling_4137ACF6_B96C"></a>Working with Build Errors</h3></div></div></div><p class="NormalText">One key advantage of building within SlickEdit is the ability to jump from an 
      error message to the location in the code associated with that error. This makes it much faster to 
      find and fix problems after doing a build.
      </p><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_1001533"></a>
        <a class="indexterm" name="sect_buildingandcompiling_D4A1DE1E_7E16"></a>
        Viewing Errors</h4></div></div></div><p class="NormalText">SlickEdit provides a variety of mechanisms to display errors from a 
        build, including:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">Error markers are placed in the margin of the editor window.</p></li><li><p class="NormalText">The Build tool window displays the output from the build 
            process.</p></li><li><p class="NormalText">The Message List tool window displays a list of errors and warnings 
            parsed from the build output.</p></li><li><p class="NormalText">
            <span><strong class="command">list_errors</strong></span> will display the output from a 
            build in a pop-up window. This is useful if you have configured a build command and 
            configured it not to output to the Build window.</p></li></ul></div><p class="NormalText">For information about how to jump from an error to the source code, 
        see <a href="ch07.htm#sect_buildingandcompiling_26963_41674">Navigating from Build Errors to Source Locations</a>.</p><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_69234_36798"></a>Viewing Errors in the Editor Window</h5></div></div></div><p class="NormalText">Error markers are displayed as red <span><strong class="guibutton">X</strong></span> 
          bitmaps in the left margin of the editor window after a build or compile is completed. To clear 
          these markers, fix the errors and rebuild. You can also clear the markers by selecting 
          <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Clear All Error Markers</strong></span>, 
          from the main menu, or by using the <span><strong class="command">clear_all_error_markers </strong></span> command.</p><p class="NormalText">You can move from one error to the next using 
            <span><strong class="command">next-error</strong></span> and <span><strong class="command">prev-error</strong></span>. These commands determine the 
            next and previous error based on their position in the build output and the current error, 
            marked with a green triangle. See <a href="ch07.htm#sect_buildingandcompiling_26963_41674">Navigating from Build Errors to Source Locations</a> 
            for details on using these commands.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_21722_17486"></a>Viewing Build Results in the Build Tool Window</h5></div></div></div><p class="NormalText">The output from a build (<span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Build</strong></span>) or a compile 
          (<span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Compile</strong></span>) are 
          sent to the Build tool window, docked at the bottom of the SlickEdit window by default. This is 
          the same text you would see if you ran the build in an external command shell. See <a href="ch07.htm#sect_buildingandcompiling_26963_41674">Navigating from Build Errors to Source Locations</a> for details on jumping from an error 
          message to the corresponding source location and for navigating to the next or previous error.  
          </p><p class="NormalText">SlickEdit is  already configured to parse many common error formats. If 
          yours is not recognized, you need to configure a new error regular expression. See <a href="ch07.htm#sect_buildingandcompiling_14399_19878">Parsing Errors with Regular Expressions</a> for more information.
          </p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_47388_40630"></a>Viewing Build Errors in the Message List Tool Window</h5></div></div></div><p class="NormalText">The Message List tool window parses the errors from the Build tool 
          window and displays a list of errors and warnings in a tabular form. Messages can be sorted 
          and filtered. You can also jump from a message to the corresponding location in the source 
          code. For more information see <a href="ch08s18.htm">Message List</a>.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_1001986"></a>
          <a class="indexterm" name="sect_buildingandcompiling_C2D446C5_7F9D"></a>
          <a class="indexterm" name="sect_buildingandcompiling_F9547D7A_EA13"></a>
          <a class="indexterm" name="sect_buildingandcompiling_E395DB99_7E51"></a>Listing Errors with list-errors</h5></div></div></div><p class="NormalText">To see a list of errors that have occurred during the current editing 
          session, use the <span><strong class="command">list_errors</strong></span> command. The Error File dialog box will be 
          displayed.</p><p class="NormalText">Move the cursor in the editor control to the error message you want to go to and click <span><strong class="guibutton">Go To Cursor Error</strong></span> to view the source code.</p></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_26963_41674"></a>Navigating from Build Errors to Source Locations</h4></div></div></div><a class="indexterm" name="sect_buildingandcompiling_58645_32723"></a><p class="NormalText">SlickEdit provides the means to jump from an error in the Build window to 
        the corresponding location in the source code. You can do this by any of the following: 
      </p><div class="orderedlist"><ol type="1"><li><p class="NormalText">Double-clicking on an error in the Build window.</p></li><li><p class="NormalText">Running the <span><strong class="command">cursor-error</strong></span> command, bound to 
        <span><strong class="keycap">Alt </strong></span>+<span><strong class="keycap">1</strong></span> in CUA 
        emulation.</p></li><li><p class="NormalText">Selecting <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Go to Error or Include</strong></span>.</p></li></ol></div><p class="NormalText">In each case you must select or position the cursor within a line 
        that contains the filename and, optionally, the line number and column number.</p><p class="NormalText">You can move from one error in the Build window to the next using the 
        <span><strong class="command">next-error</strong></span> command, bound to <span><strong class="keycap">Ctrl 
        </strong></span>+<span><strong class="keycap">Shift </strong></span>+<span><strong class="keycap">Down </strong></span> in the CUA emulation. The same 
        operation is available on the main menu, by selecting <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Next Error</strong></span>.
        </p><p class="NormalText">Use <span><strong class="command">prev-error</strong></span>, bound to <span><strong class="keycap">Ctrl </strong></span>+<span><strong class="keycap">Shift </strong></span>+<span><strong class="keycap">Up </strong></span>, to 
        move to the previous error. Again, you can select this operation from the main menu at 
        <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Previous Error</strong></span>. 
        </p><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Note</h3><p class="CellBody">The key bindings for <span><strong class="command">next-error</strong></span> and 
            <span><strong class="command">prev-error</strong></span> can be used in both the Build tool window and the editor 
            window. in both cases, the result is driven by the order of errors in the Build tool window 
            and the current error, marked by a green triangle.</p></div><p class="NormalText">If the error is within the same file, SlickEdit will move the cursor to 
        that line. Otherwise, SlickEdit will open the corresponding file and move to the indicated 
        line.  
        </p><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Tip</h3><p class="CellBody">Navigating to a source code location from the Build tool window is not 
          limited to build output. You can execute commands, like sgrep, in that window and use the 
          same methods to jump to the indicated locations.</p></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a name="sect_buildingandcompiling_14399_19878"></a>
        <a name="sect_buildingandcompiling_14399_1009830"></a>
        <a class="indexterm" name="sect_buildingandcompiling_7A7BC69E_3BD6"></a>
        <a class="indexterm" name="sect_buildingandcompiling_4B810E55_7A34"></a>
        <a class="indexterm" name="sect_buildingandcompiling_9C23A7D7_3B91"></a>Parsing Errors with Regular Expressions</h4></div></div></div><p class="NormalText">SlickEdit uses regular expressions to parse the contents of the Build 
        window and retrieve the file name or path, line number, column number, and error message. A set 
        of default regular expressions are included that can parse error messages from supported 
        compilers like Visual Studio, GCC, and Java. For other tools, you may have to write additional 
        regular expressions.</p><p class="NormalText">Error parsing regular expressions are written using the SlickEdit regular 
        expression syntax (see <a href="ch10s08.htm#sect_regularexpressions_13949_43274">SlickEdit® Regular Expressions</a>). They are stored 
        in the <code class="filename">ErrorRE.xml</code> file located in your configuration directory. If the file 
        is deleted, SlickEdit will create a new one with the default values. Rather than modifying the 
        XML by hand, you can use the Options dialog to configure error parsing, creating new regular 
        expressions or managing the list of existing ones. See the following sections for more 
        information:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_43612">Configuring Error Parsing</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_28580">Enabling Expressions</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_47500">Setting Priority</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_46874">Adding New Categories</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_55893">Adding New Expressions</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_18877">Editing Expressions</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_39290">Error Expression Groups</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_25562">Sample: Creating a New Error Parsing Expression</a>
          </p></li><li><p class="NormalText">
            <a href="ch07.htm#sect_buildingandcompiling_14399_91152">Testing Expressions</a>
          </p></li></ul></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_43612"></a>
          <a name="sect_buildingandcompiling_14399_1001537"></a>
          <a class="indexterm" name="sect_buildingandcompiling_56AF24BD_477C"></a>
          <a class="indexterm" name="sect_buildingandcompiling_CC83CFB6_9477"></a>
          <a class="indexterm" name="sect_buildingandcompiling_5FBFBCB4_A129"></a>Configuring Error Parsing</h5></div></div></div><p class="NormalText">To configure error parsing, use the Configure Error Parsing option screen. It can be accessed from the main menu by clicking <span><strong class="guimenu">Build </strong></span> &#8594; <span><strong class="guimenuitem">Configure Error Parsing</strong></span>, or by opening the Options dialog (<span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Options</strong></span>) and selecting <span><strong class="guimenu">Configure Error Parsing</strong></span> from the <span><strong class="guilabel">Tools</strong></span> category. You can also display the screen with the <span><strong class="command">configure_error_regex</strong></span> command.</p><div class="mediaobject"><img src="Resources/options_tools_configureerrorparsing.png"></div><p class="NormalText">The <span><strong class="guilabel">Categories</strong></span> list displays all the expression categories that are defined in the <code class="filename">ErrorRE.xml</code> configuration file. Highlighting a category will show the individual expressions for that category.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_28580"></a>
          <a name="sect_buildingandcompiling_14399_1001800"></a>Enabling Expressions</h5></div></div></div><p class="NormalText">To enable or disable an expression, or a whole category of expressions, simply click the check box to the left of the expression or category. If a category is unchecked (disabled), then the expressions are not used to parse build output, regardless of their checked or unchecked status.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_47500"></a>
          <a name="sect_buildingandcompiling_14399_1001803"></a>Setting Priority</h5></div></div></div><p class="NormalText">To optimize performance for your development needs, you may re-prioritize either expressions or whole categories by using the blue <span><strong class="guibutton">Up</strong></span> and <span><strong class="guibutton">Down</strong></span> arrow buttons.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_88914_36798"></a>Resetting Configuration</h5></div></div></div><p class="NormalText">To reset the configuration settings back to their installation defaults, click the <span><strong class="guibutton">Reset</strong></span> button.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_46874"></a>
          <a name="sect_buildingandcompiling_14399_1001806"></a>Adding New Categories</h5></div></div></div><p class="NormalText">Click the green <span><strong class="guibutton">Plus</strong></span> button next to the category listing. The following prompt is shown.</p><div class="mediaobject"><img src="Resources/errorREnewcat11.jpg"></div><p class="NormalText">Enter the name for your new category and click <span><strong class="guibutton">OK</strong></span>. Category names must be unique and the dialog will prevent you from adding duplicate entries.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_55893"></a>
          <a name="sect_buildingandcompiling_14399_1001815"></a>Adding New Expressions</h5></div></div></div><p class="NormalText">You can add new expressions to any category. Highlight the category you want the new expression to be under, then click the green <span><strong class="guibutton">Plus</strong></span> button to the right of the Expressions listing. The following dialog is displayed.</p><div class="mediaobject"><img src="Resources/editexpression_dialog.png"></div><p class="NormalText">Enter a name for your new expression. The regular expression must be authored using SlickEdit® Regular Expression syntax. The arrow to the right of the entry field will display a menu of common regular expression syntax constructs to assist you. A "starter" expression is provided for you, as well as some sample error output lines. See the following sections on how to author and test your expression.</p><p class="NormalText">Once you have created and tested your new expression, click <span><strong class="guibutton">OK</strong></span> to save the expression. You must also click <span><strong class="guibutton">OK</strong></span> when quitting the main configuration dialog to save your changes.</p><div class="sect5" lang="en"><div class="titlepage"><div><div><h6 class="title"><a name="section_8c697c64-c011-4cf4-b11b-1f650a6b1e1b"></a>
            <a class="indexterm" name="sect_buildingandcompiling_EFE8F7E8_F1AA"></a>
            <a class="indexterm" name="sect_buildingandcompiling_5289433D_223E"></a>Exclusions</h6></div></div></div><p class="NormalText">Some of the error parsing expressions may match lines that you do not want recognized as errors. To eliminate these "false positive" matches, define a new expression in the Exclusions category. The default configuration file contains an expression to match the "Total Time" build output line that is generated by SlickEdit®'s internal build system, <span><strong class="command">vsbuild</strong></span>. Any new exclusion expressions you write should be very strict to prevent real error lines from being skipped. You do not have to define match groups in the exclusion expressions since they will not be used to extract file name and line number information.</p></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_18877"></a>
          <a name="sect_buildingandcompiling_14399_1001829"></a>Editing Expressions</h5></div></div></div><p class="NormalText">To edit an existing expression, double-click the expression in the expression listing, or highlight the expression and click the small <span><strong class="guibutton">Edit</strong></span> button to the right of the listing. This launches the same dialog that is used to create a new expression.</p></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_39290"></a>
          <a name="sect_buildingandcompiling_14399_1001832"></a>Error Expression Groups</h5></div></div></div><p class="NormalText">In order to navigate to the file that caused the build error or warning, the regular expression needs to be able to identify the file name, and optionally the line and column number, as well as the error message. This is accomplished by using four <span class="emphasis"><em>Tagged Expressions</em></span>, also known as <span class="emphasis"><em>match groups</em></span>. The following table documents the match groups used to identify specific portions of an error message.</p><div class="informaltable"><a name="table_d53c6015-17c8-4ffd-98f3-a2ffd44642f9"></a><table border="1"><colgroup><col><col><col></colgroup><thead><tr><th>
                  <p class="CellHeading">Group Number</p>
                </th><th>
                  <p class="CellHeading">Group Syntax</p>
                </th><th>
                  <p class="CellHeading">Purpose</p>
                </th></tr></thead><tbody><tr><td>
                  <p class="CellBody">0</p>
                </td><td>
                  <p class="CellBody">
                    <span><strong class="command">{#0:p}</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Retrieves the file name or file path.</p>
                </td></tr><tr><td>
                  <p class="CellBody">1</p>
                </td><td>
                  <p class="CellBody">
                    <span><strong class="command">{#1:i}</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Retrieves the error line number.</p>
                </td></tr><tr><td>
                  <p class="CellBody">2</p>
                </td><td>
                  <p class="CellBody">
                    <span><strong class="command">{#2:i}</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Retrieves the error column.</p>
                </td></tr><tr><td>
                  <p class="CellBody">3</p>
                </td><td>
                  <p class="CellBody">
                    <span><strong class="command">{#3}</strong></span>
                  </p>
                </td><td>
                  <p class="CellBody">Retrieves the error message text.</p>
                </td></tr></tbody></table></div><p class="NormalText">The expression for Group #3 can match any portion of the error message you like. The sample expression <span><strong class="command">{#3?+}$</strong></span> is just matching all remaining characters up to the end of the line. The groups can occur in any order in your expression. For example, if the build tool output places the file name, line, and column after the error message, like the following hypothetical example:</p><pre class="programlisting"> Error E509: Bad format: found in /usr/tmp/file.x, line 23, column 13</pre><p class="NormalText">then your expression might look something like the following:</p><pre class="programlisting"> ^Error {#3?+} found in {#0:p},:bline:b{#1:i},:bcolumn:b{#2:i}$</pre></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_25562"></a>
          <a name="sect_buildingandcompiling_14399_1001879"></a>
          <a class="indexterm" name="sect_buildingandcompiling_00A15546_75EA"></a>Sample: Creating a New Error Parsing Expression</h5></div></div></div><p class="NormalText">The steps below demonstrate creating a new regular expression to support error output from a Lint tool. Below are some samples of the tool's output.</p><p class="NormalText">Sample 1: </p><pre class="programlisting"> file.cpp (5) : Warning 200: Possible dereferencing of null pointer</pre><p class="NormalText">Sample 2:</p><pre class="programlisting"> includes\file.h (17) : Warning 003: Macro not parenthesized</pre><div class="orderedlist"><ol type="1"><li><p class="NormalText">Create a new expression category, and name it "Lint".</p></li><li><p class="NormalText">Highlight the newly created Lint category. The Expressions listing is empty.</p></li><li><p class="NormalText">Create a new expression by clicking the <span><strong class="guibutton">New Expression</strong></span> (green <span><strong class="guibutton">Plus</strong></span>) button to the right of the expression listing. Copy and paste the sample output lines into the Test Case area.</p></li><li><p class="NormalText">The first thing to match is the file name at the beginning of the line. The group number reserved for the file is <span><strong class="command">{#0}</strong></span>. SlickEdit® syntax for matching a file path is <span><strong class="command">:p</strong></span>, and <span><strong class="command">^</strong></span> represents the beginning of a line. Therefore, enter the following in the Expression entry field: <span><strong class="command">^{#0:p}</strong></span>.</p></li><li><p class="NormalText">There is now one space, <span><strong class="command">:b</strong></span>, followed by an integer,<span><strong class="command"> :i</strong></span>, enclosed in parentheses, <span><strong class="command">\(\)</strong></span>. The group number reserved for the error line number is <span><strong class="command">{#1}</strong></span>. Edit the expression to be: <span><strong class="command">^{#0:p}:b\({#1:i}\)</strong></span>.</p></li><li><p class="NormalText">After the line number, there is a space,<span><strong class="command"> :b</strong></span>, a colon, <span><strong class="command">\:</strong></span>, another space, and then the informative message on the remainder of the line. To match any number of characters you can use <span><strong class="command">?+</strong></span>, and to match the end of the line is <span><strong class="command">$</strong></span>. The group number reserved for the output message is <span><strong class="command">{#3}</strong></span>. Edit the expression to be: <span><strong class="command">^{#0:p}:b\({#1:i}\):b\::b{#3?+}$</strong></span></p></li><li><p class="NormalText">Now test the expression. Click the <span><strong class="guibutton">Validate</strong></span> button. You should see a pop-up message for each line of sample output.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> to save the new expression, and click <span><strong class="guibutton">OK</strong></span> on the main dialog to save your changes to the configuration file.</p></li></ol></div></div><div class="sect4" lang="en"><div class="titlepage"><div><div><h5 class="title"><a name="sect_buildingandcompiling_14399_91152"></a>
          <a name="sect_buildingandcompiling_14399_1006107"></a>
          <a class="indexterm" name="sect_buildingandcompiling_E81F0A6A_AC72"></a>Testing Expressions</h5></div></div></div><p class="NormalText">Copy some sample error or warning output lines from your compiler or build tool, and enter them into the Test Case area. Click the <span><strong class="guibutton">Validate</strong></span> button to validate the regular expression against the Test Case text lines. If the regular expression syntax is invalid, then the expression text is colored red, and an error message is displayed on the status line. If any of the lines in the Test Case area match the expression, a message box displays the details of the match, like the following sample.</p><div class="mediaobject"><img src="Resources/errorREvalidate11.jpg"></div><p class="NormalText">This pop-up displays the line of the matched test case and value for each of the four tagged expression groups.</p><p class="NormalText">You may also want to use the Regex Evaluator tool window to test your expressions. From the main menu click <span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Regex Evaluator</strong></span>. Be sure to select the SlickEdit® syntax option when authoring expressions for error parsing. For more information on the Regex Evaluator tool window, see <a href="ch10s08.htm#sect_regularexpressions_13949_51375">The Regex Evaluator</a>.</p><p class="NormalText"></p></div></div></div></div></div></body></html>
