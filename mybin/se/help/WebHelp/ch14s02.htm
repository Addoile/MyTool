<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Differences Between Slick-C® and C++</title><link rel="stylesheet" href="slickedit_help.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.71.1"><link rel="start" href="index.htm" title="Welcome to SlickEdit 2013"><link rel="up" href="ch14.htm" title="Chapter 14.  Slick-C® Macro Programming Guide"><link rel="prev" href="ch14.htm" title="Chapter 14.  Slick-C® Macro Programming Guide"><link rel="next" href="ch14s03.htm" title="Four Ways to Use Slick-C®"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><p class="HeaderText"><a href="index.htm#contents">Contents</a> : <a href="ix01.htm">Index</a> : <a href="search.htm">Search</a></p><hr><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="slick_c_differences_12406_90138"></a>
    <a name="slick_c_differences_12406_1007259"></a>Differences Between Slick-C® and C++</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007260"></a>Structures</h3></div></div></div><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">Space for structure member variables is allocated when you access the member.</p></li><li><p class="NormalText">Structure data is not continuous. This is obvious for string, array, and hash table member variables that contain variable size data. However, even other types are sometimes stored elsewhere.</p></li><li><p class="NormalText">There is not a <span><strong class="command">sizeof</strong></span> function that tells you the size of a structure in bytes.</p></li></ul></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007264"></a>Arrays</h3></div></div></div><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">Space for array elements is allocated when you index into the array.</p></li><li><p class="NormalText">You cannot use pointer variables to traverse array elements.</p></li><li><p class="NormalText">You cannot limit the number of elements that the array may contain.</p></li><li><p class="NormalText">Specifying an array variable without the <span><strong class="command">[]</strong></span><span><strong class="command"></strong></span>operator does not return a pointer to the first element. Instead it refers to the entire array. This allows you to copy one array to another or define a function that returns a copy of an array.</p></li><li><p class="NormalText">There is not a <span><strong class="command">sizeof</strong></span> function that tells you the size of the array in bytes. There is a <span><strong class="command">_length</strong></span> method that tells you the number of elements in the array.</p></li></ul></div><p class="NormalText">Example:</p><pre class="programlisting">struct PHONERECORD {
   _str name;
   _str PhoneNumber;
};
 
defmain() 
{
   PHONERECORD list[];  // No size limit is allowed here.
 
   // Allocate space for 0 index and name member.
   list[0].name=Joe;
   // Allocate space for PhoneNumber member.
   list[0].PhoneNumber=555-1234;
 
   PHONERECORD list2[];
   list2=list;   // Copy the entire array into list2.
   t=list2;  // Now copy the entire array into a container variable.
}</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007292"></a>Hash Tables</h3></div></div></div><p class="NormalText">Slick-C® provides a <span><strong class="command">:[]</strong></span> hash table operator that is similar to the array operator <span><strong class="command">[]</strong></span> except that hash tables are indexed with a string type or by class objects. See <a href="ch14s05.htm#slick_c_types_11595_75000">Hash Tables</a> for more information.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007295"></a>Assignment Statement</h3></div></div></div><p class="NormalText">Assignment statements in Slick-C® are not as shallow as C++. Array, hash table, and structure types are recursively traversed. Pointers are not traversed.</p><p class="NormalText">Example:</p><pre class="programlisting">struct {
   int a[];
} s1,s2;
s1.a[0]=1;
s2=s1;  // Copy stucture and all elements of array.</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007305"></a>Comparison Operator</h3></div></div></div><p class="NormalText">The <span><strong class="command">==</strong></span> and <span><strong class="command">!=</strong></span> operators support comparing container types, arrays, hash tables, and structures. Complex types are traversed recursively, like the assignment statement. Strings within an array, hash table, or struct must match exactly (spaces matter).</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007307"></a>Preprocessing</h3></div></div></div><p class="NormalText">Preprocessing expressions can use string and floating point expressions.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007309"></a>switch Statement</h3></div></div></div><p class="NormalText">The <span><strong class="command">switch</strong></span> statement supports string expressions and integer expressions.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007311"></a>Labeled Loops</h3></div></div></div><p class="NormalText">The <span><strong class="command">break</strong></span> and <span><strong class="command">continue</strong></span> statements accept an optional label parameter so that you can break a specific loop (like Java).</p><p class="NormalText">Example:</p><pre class="programlisting">outerlabel:
       for (;;) {
          for (;;) {
             if () break outerlabel;
             if () continue outerlabel;
          }
       }</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007323"></a>Variable Argument Functions</h3></div></div></div><p class="NormalText">An <span><strong class="command">arg</strong></span> function allows you to define functions that accept a variable number of arguments. The <span><strong class="command">arg</strong></span> function can be used on the left side of an assignment statement.</p><p class="NormalText">Example: </p><pre class="programlisting"> defmain()
   {
      p(Param1,2,x);
   }
   void p()
   {
      messageNwait(Called with arg() arguments);
      for (i=1;i&lt;=arg();++i) {
         messageNwait(arg(i)=arg(i));
      }
      // All undeclared variable parameters are passed by reference so when
      // a variable is passed, we can change the contents of the callers variable.
      arg(3)=New value for x;
   }</pre></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007343"></a>Built-in Graphics Primitives</h3></div></div></div><p class="NormalText">You can define dialog box resources and menu resources. There are primitives for defining event handlers for dialog boxes and declaring control types. This allows the Slick-C® linker to detect a reference to a control that does not exist on a dialog box before you execute the code. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007345"></a>Clipboard Inheritance®</h3></div></div></div><p class="NormalText">Clipboard Inheritance provides inheritance specifically for dialog boxes. This feature enables the copying of parts of existing dialog boxes to the clipboard and pasting them elsewhere, and the original code still runs. New code can be attached to the new controls without affecting the original controls, and to affect both instances of the controls (inheritance). Creating inheritance for parts of dialog boxes is very natural because the Slick-C® language has been designed for this feature. See <a href="ch14s20.htm">Clipboard Inheritance®</a> for more information.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007347"></a>End of Statement Semicolon</h3></div></div></div><p class="NormalText">Slick-C® assumes that the end of line is a semicolon except under a few conditions. Expressions may extend across line boundaries if the line ends in a binary operator or if the line ends with a backslash, and expressions in parentheses may extend across line boundaries. </p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007349"></a>Type Checking</h3></div></div></div><p class="NormalText">Type checking in Slick-C® is identical to C++ except for the following:</p><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">The <span><strong class="command">typeless</strong></span> type is compatible with ALL other types.</p></li><li><p class="NormalText">String constants are automatically converted to numeric types where necessary.</p></li><li><p class="NormalText">Integer types are automatically converted to string types.</p></li><li><p class="NormalText">Functions do not require prototypes. However, when a prototype is given, strict type checking is enforced like you would expect. A <span><strong class="command">#pragma</strong></span> option to require prototypes will eventually be added.</p></li></ul></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="slick_c_differences_12406_1007355"></a>Capability not Supported by Slick-C®</h3></div></div></div><div class="itemizedlist"><ul type="disc"><li><p class="NormalText">You cannot define your own classes, methods, or inheritance. The <span><strong class="command">class</strong></span>, <span><strong class="command">public</strong></span>, <span><strong class="command">private</strong></span>, and <span><strong class="command">new</strong></span> keywords are not supported. Classes in Slick-C will not require a <span><strong class="command">delete</strong></span> to free objects.</p></li><li><p class="NormalText">Only one syntax is currently supported for making a call with a pointer to a function variable. The <span class="emphasis"><em>pfn</em></span><span><strong class="command">(</strong></span><span class="emphasis"><em>p1</em></span><span><strong class="command">,</strong></span><span class="emphasis"><em>p2</em></span><span><strong class="command">, )</strong></span> syntax is not supported. This limitation is necessary for container variables because the compiler does not know the type of the variable.</p></li><li><p class="NormalText">
          <span><strong class="command">char</strong></span> and <span><strong class="command">short</strong></span> types are not available.</p></li><li><p class="NormalText">Template classes are not supported. Container variables are sometimes a more powerful mechanism for accomplishing much of what is done with template classes. However, container variables lack the speed and additional type checking of template classes.</p></li><li><p class="NormalText">Function overloading is not supported.</p></li><li><p class="NormalText">
          <span><strong class="command">enum</strong></span> is not supported.</p></li><li><p class="NormalText">Slick-C only supports the less ambiguous C-style type casting.</p></li><li><p class="NormalText">Because Slick-C does not allow low level manipulation of memory, you cannot do things like type cast an <span><strong class="command">int *</strong></span> to a <span><strong class="command">long *</strong></span>.</p></li><li><p class="NormalText">There are no character constants defined using single quote characters. Slick-C currently allows the use of single quotes to define strings. Single quoted strings are much more readable for file names or regular expressions that require the use of backslashes.</p></li><li><p class="NormalText">
          <span><strong class="command">goto</strong></span> is not supported. (Slick-C supports labeled loops.)</p></li></ul></div><p class="NormalText"></p></div></div></body></html>
