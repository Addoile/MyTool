<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><title>Syntax Expansion</title><link rel="stylesheet" href="slickedit_help.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.71.1"><link rel="start" href="index.htm" title="Welcome to SlickEdit 2013"><link rel="up" href="ch08.htm" title="Chapter 8.  Editing Features"><link rel="prev" href="ch08s10.htm" title="Aliases"><link rel="next" href="ch08s12.htm" title="Code Templates"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><p class="HeaderText"><a href="index.htm#contents">Contents</a> : <a href="ix01.htm">Index</a> : <a href="search.htm">Search</a></p><hr><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="sect_syntaxexpansion_13209_88483"></a>
    <a name="sect_syntaxexpansion_13209_1004100"></a>
    <a class="indexterm" name="sect_syntaxexpansion_03CD05A0_B5EE"></a>
    <a class="indexterm" name="sect_syntaxexpansion_D0C7F216_9C3A"></a>Syntax Expansion</h2></div></div></div><p class="NormalText">Syntax Expansion is a feature designed to minimize keystrokes, increasing your 
    code editing efficiency. When you type certain keywords and then press the spacebar, Syntax Expansion 
    inserts a default template that is specifically designed for this statement. For example, if you are 
    using the C language and type "<span class="bold"><strong>for</strong></span>", press <span><strong class="keycap">Space</strong></span> 
    and the following text expansion is inserted, with the cursor location between the 
    parentheses:</p><pre class="programlisting">for() {
}</pre><p class="NormalText">Syntax Expansion triggers <a href="ch08s14.htm#sect_surroundwith_13231_29648">Dynamic Surround</a> 
    for block-oriented statements. This allows you to expand and collapse the newly inserted block to 
    include more/less code. Additionally, for C, C#, C++, J#, Java, and Slick-C®, after the statement is 
    expanded, you can use the <span><strong class="command">next_hotspot</strong></span> command (<span><strong class="keycap">Ctrl</strong></span>+<span><strong class="keycap">[</strong></span>) to jump the cursor to the next 
    part of the statement. In the case of the <span><strong class="command">for</strong></span> loop above, <span><strong class="keycap">Ctrl</strong></span>+<span><strong class="keycap">[</strong></span> would move the cursor from the 
    group in parentheses to the code block.</p><p class="NormalText">The structures <span><strong class="command">loop</strong></span>, <span><strong class="command">if</strong></span>, and <span><strong class="command">switch</strong></span> or <span><strong class="command">case</strong></span> are also expanded. You do not have to type the entire keyword for Syntax Expansion to occur. If there is more than one keyword that matches what you type, a list of possible keyword matches is displayed. To get the C template displayed above, type "<span class="bold"><strong>f</strong></span>" followed by pressing <span><strong class="keycap">Space</strong></span>.</p><p class="NormalText">To override the insertion of braces immediately for one line <span><strong class="command">if</strong></span>, <span><strong class="command">for</strong></span>, or <span><strong class="command">while</strong></span> statements, type a semicolon immediately after the keyword. For example:</p><pre class="programlisting">if;    =&gt;   if ( &lt;cursor here&gt; ) &lt;next hotspot&gt;;</pre><p class="NormalText">To override non-insertion of braces immediately for <span><strong class="command">if</strong></span>, <span><strong class="command">for</strong></span>, <span><strong class="command">while</strong></span>, <span><strong class="command">foreach</strong></span>, <span><strong class="command">with</strong></span>, <span><strong class="command">lock</strong></span>, <span><strong class="command">fixed</strong></span>, and <span><strong class="command">switch</strong></span> statements, type an open brace immediately after the keyword. For example:</p><pre class="programlisting">if{    =&gt;   if ( &lt;cursor here&gt; ) { &lt;next hotspot&gt; }</pre><p class="NormalText">If the default behavior of Syntax Expansion does not match your coding style, for most languages, it can be customized. From the main menu, click <span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Options </strong></span> &#8594; <span><strong class="guimenuitem">Languages</strong></span>, expand your language category and language, then select <span><strong class="guibutton">[</strong></span><span class="emphasis"><em>Language</em></span><span><strong class="guibutton">] Formatting Options</strong></span>. See <a href="ch12s11.htm#sect_options_menuanddialogs_14207_90298">Language-Specific Formatting Options</a> for more information.</p><p class="NormalText">For further customization, for most languages, you can override the default keyword expansion by defining an alias for that keyword. See <a href="ch08s10.htm#sect_aliases_12052_80032">Language-Specific Aliases</a> for more information.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_syntaxexpansion_13209_1004152"></a>Syntax Expansion Settings</h3></div></div></div><p class="NormalText">To access Syntax Expansion settings, from the main menu, click <span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Options </strong></span> &#8594; <span><strong class="guimenuitem">Languages</strong></span>, expand your language category and language, then select <span><strong class="guilabel">Indent</strong></span>. </p><p class="NormalText">To turn Syntax Expansion on or off, select or clear the option <span><strong class="guilabel">Syntax expansion</strong></span>. To change the minimum expandable keyword length, enter the value by using the <span><strong class="guilabel">Minimum expandable keyword length</strong></span> spin box.</p><p class="NormalText">To set options such as brace style, from the main menu, use the <span><strong class="guibutton">[</strong></span><span class="emphasis"><em>Language</em></span><span><strong class="guibutton">] Formatting Options</strong></span> screen.</p><div xmlns:fo="http://www.w3.org/1999/XSL/Format" class="tip" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="admon">Tip</h3><p class="CellBody">
        SlickEdit® can display Syntax Expansion choices for the word prefix under the cursor. To turn this option on/off, select the <span><strong class="guilabel">Auto-Complete</strong></span> language-specific options screen and select/clear the <span><strong class="guilabel">Syntax expansion</strong></span> option. See <a href="ch08s09.htm">Completions</a> for more information.</p></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_syntaxexpansion_13209_1004195"></a>Modifying Syntax Expansion Templates</h3></div></div></div><p class="NormalText">Syntax Expansion templates are essentially language-specific aliases that have been pre-defined. You can modify these templates by replacing them with your own. </p><p class="NormalText">For example, to add a comment to the end of C <span><strong class="command">for</strong></span>, <span><strong class="command">while</strong></span>, <span><strong class="command">if</strong></span>, and <span><strong class="command">switch</strong></span> statements:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">From the main menu, click <span><strong class="guimenu">Tools </strong></span> &#8594; <span><strong class="guimenuitem">Options </strong></span> &#8594; <span><strong class="guimenuitem">Languages</strong></span>, expand your language category and language, then select <span><strong class="guilabel">Aliases</strong></span>.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">New</strong></span> and then type <span><strong class="command">for</strong></span> as the alias name.</p></li><li><p class="NormalText">Type the following lines in the text box to the right of the alias name:</p><pre class="programlisting">for (%\c;;) {
} /* for */</pre><p class="NormalText">The <span><strong class="command">%\c</strong></span> escape sequence above specifies the cursor placement after expansion is performed.</p></li><li><p class="NormalText">Repeat Steps 2 and 3 for the <span><strong class="command">while</strong></span>, 
          <span><strong class="command">if</strong></span>, and <span><strong class="command">switch</strong></span> keywords.</p></li><li><p class="NormalText">Click <span><strong class="guibutton">OK</strong></span> to save new aliases.</p></li></ol></div><p class="NormalText">The above steps replace the default Syntax Expansion templates for these keywords. The C brace style options will not affect defined aliases.</p><p class="NormalText">For more information on working with aliases, using the Alias options page, or using alias escape sequences, see <a href="ch08s10.htm#sect_aliases_12052_80032">Language-Specific Aliases</a>.</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a name="sect_syntaxexpansion_13209_1004568"></a>Adding Syntax Expansion for Other Languages</h3></div></div></div><p class="NormalText">To add syntax expansion and indenting for other languages, complete the following steps:</p><div class="orderedlist"><ol type="1"><li><p class="NormalText">Use the <code class="filename">prg.e</code> macro as a template. This file is located in the <code class="filename">macros</code> subdirectory of your installation directory. Make a copy of it and give it another name.</p></li><li><p class="NormalText">Change the #define constants <span><strong class="command">EXTENSION</strong></span> and <span><strong class="command">MODE_NAME</strong></span> near the top of the file to reflect the new extension and mode name respectively. Do not use any spaces in these constants.</p></li><li><p class="NormalText">Change the name of the first five characters of the _command functions <span><strong class="command">dbase_mode</strong></span>, <span><strong class="command">dbase_enter</strong></span>, and <span><strong class="command">dbase_space</strong></span> to use the value given to the <span><strong class="command">MODE_NAME</strong></span> constant in Step 2.</p></li><li><p class="NormalText">Modify the <span><strong class="command">prg_expand_enter</strong></span> function to provide the <span><strong class="keycap">Enter</strong></span> key the desired support.</p></li><li><p class="NormalText">Modify the <span><strong class="command">prg_expand_space</strong></span> function to provide the <span><strong class="keycap">spacebar</strong></span> key the desired support. If you can rely on language-specific aliases, follow the comment in this function.</p></li><li><p class="NormalText">Use the load command <span><strong class="guimenu">Macro </strong></span> &#8594; <span><strong class="guimenuitem">Load Module</strong></span> to load new macro modules.</p></li></ol></div><p class="NormalText">Steps 4 and 5 require a good understanding of the Slick-C® language and what this specific macro is doing. See the <span class="emphasis"><em>Slick-C® Macro Programming Guide</em></span> for more information.</p><p class="NormalText"></p></div></div></body></html>
